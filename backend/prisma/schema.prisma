// KOKOKA School Management System - PostgreSQL Schema
// This schema defines the complete database structure for the school management system

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// CORE SYSTEM MODELS
// ================================

model School {
  id          String    @id @default(uuid())
  name        String    @unique
  slug        String    @unique
  subdomain   String    @unique
  logo        String?
  description String?
  established DateTime?
  type        SchoolType @default(SECONDARY)
  status      SchoolStatus @default(PENDING)

  // Address
  streetAddress String?
  city          String?
  state         String?
  zipCode       String?
  country       String?

  // Contact Information
  email   String?
  phone   String?
  website String?

  // Settings as JSON
  settings    Json?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  users                User[]
  students             Student[]
  teachers             Teacher[]
  staff                Staff[]
  classes              Class[]
  subjects             Subject[]
  academicYears        AcademicYear[]
  terms                Term[]
  assessments          Assessment[]
  grades               Grade[]
  attendance           Attendance[]
  documents            Document[]
  guardians            Guardian[]
  houses               House[]
  sections             Section[]
  departments          Department[]
  teacherSubjects      TeacherSubject[]
  classTeachers        ClassTeacher[]
  sittingPositions     SittingPosition[]
  curricula            Curriculum[]
  studentClassHistory  StudentClassHistory[]
  academicCalendars    AcademicCalendar[]
  
  // Notification relationships
  notifications        Notification[]
  notificationTemplates NotificationTemplate[]
  webhookSubscriptions WebhookSubscription[]
  
  // Grade Management relationships
  gradeBooks           GradeBook[]

  @@map("schools")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String
  name          String
  role          UserRole
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  lastLogin     DateTime?
  profileData   Json?
  profileImage  String?
  
  // OAuth fields
  googleId      String?   @unique
  linkedinId    String?   @unique
  
  // School relationship
  schoolId      String
  school        School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships based on role
  student             Student?
  teacher             Teacher?
  staff               Staff?
  guardian            Guardian?
  
  // Activity relationships
  createdDocuments    Document[] @relation("DocumentCreatedBy")
  verifiedDocuments   Document[] @relation("DocumentVerifiedBy")
  markedAttendance    Attendance[]
  createdAssessments  Assessment[]
  gradedAssessments   Grade[] @relation("GradedBy")
  verifiedGuardians   Guardian[] @relation("GuardianVerifiedBy")
  createdAcademicCalendars AcademicCalendar[] @relation("AcademicCalendarCreatedBy")
  createdCurricula    Curriculum[]
  
  // Notification relationships
  createdNotifications     Notification[] @relation("NotificationCreatedBy")
  createdNotificationTemplates NotificationTemplate[] @relation("NotificationTemplateCreatedBy")
  userNotifications        UserNotification[]
  notificationPreferences  UserNotificationPreferences?
  deviceTokens             DeviceToken[]
  webhookSubscriptions     WebhookSubscription[]

  @@map("users")
}

// ================================
// ACADEMIC STRUCTURE
// ================================

model AcademicYear {
  id        String    @id @default(uuid())
  name      String
  startDate DateTime
  endDate   DateTime
  isCurrent Boolean   @default(false)
  
  schoolId  String
  school    School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relationships
  terms               Term[]
  students            Student[]
  assessments         Assessment[]
  studentClassHistory StudentClassHistory[]
  academicCalendars   AcademicCalendar[]
  classCurricula      ClassCurriculum[]
  curriculumProgressTrackers CurriculumProgressTracker[]
  gradeBooks          GradeBook[]
  gradeReports        GradeReport[]

  @@unique([schoolId, name])
  @@unique([schoolId, isCurrent]) // Only one current academic year per school
  @@map("academic_years")
}

model Term {
  id        String    @id @default(uuid())
  name      String
  startDate DateTime
  endDate   DateTime
  
  schoolId       String
  school         School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  assessments Assessment[]
  gradeBooks  GradeBook[]
  gradeReports GradeReport[]

  @@unique([schoolId, academicYearId, name])
  @@map("terms")
}

model AcademicCalendar {
  id        String @id @default(uuid())
  term      AcademicTerm
  startDate DateTime
  endDate   DateTime
  holidays  Json? // Array of holiday objects: { name, date, description }
  
  schoolId       String
  school         School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  createdById    String?
  createdBy      User?        @relation("AcademicCalendarCreatedBy", fields: [createdById], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, academicYearId, term])
  @@map("academic_calendars")
}

model Department {
  id          String  @id @default(uuid())
  name        String
  code        String
  description String?
  headOfDept  String?
  
  schoolId    String
  school      School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  subjects Subject[]
  teachers Teacher[]
  staff    Staff[]

  @@unique([schoolId, code])
  @@map("departments")
}

model Subject {
  id          String  @id @default(uuid())
  name        String
  code        String
  description String?
  credits     Int?
  
  schoolId     String
  school       School     @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  teacherSubjects      TeacherSubject[]
  assessments          Assessment[]
  curriculumSubjects   CurriculumSubject[]
  gradeBooks           GradeBook[]

  @@unique([schoolId, code])
  @@map("subjects")
}

// Central Curriculum Registry - Global curriculum templates
model GlobalCurriculum {
  id              String     @id @default(uuid())
  name            String     @unique
  description     String?
  version         String?
  type            CurriculumType @default(STANDARD)
  provider        String     // e.g., "Cambridge", "IB", "National Board"
  country         String?
  language        String     @default("en")
  
  // Grade Range
  minGrade        Int        @default(1)
  maxGrade        Int        @default(12)
  
  // Curriculum Details
  framework       Json?      // Detailed framework structure
  standards       Json?      // Learning standards and benchmarks
  assessmentTypes Json?      // Supported assessment methods
  
  // Status and Licensing
  status          CurriculumStatus @default(ACTIVE)
  isOfficial      Boolean    @default(false) // Official curriculum vs custom
  licenseType     String     @default("FREE") // FREE, PREMIUM, SUBSCRIPTION
  adoptionCount   Int        @default(0) // Number of schools using this
  
  // Metadata
  tags            String[]   // Search tags
  difficulty      String     @default("STANDARD") // BEGINNER, STANDARD, ADVANCED
  
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
  // Relationships
  globalSubjects      GlobalCurriculumSubject[]
  schoolCurricula     Curriculum[] // Schools that adopted this template
  curriculumProgressTracker CurriculumProgressTracker[]

  @@map("global_curricula")
}

model GlobalCurriculumSubject {
  id                    String           @id @default(uuid())
  
  globalCurriculumId    String
  globalCurriculum      GlobalCurriculum @relation(fields: [globalCurriculumId], references: [id], onDelete: Cascade)
  
  // Subject Details
  name                  String
  code                  String
  description           String?
  
  // Grade and Term Configuration
  gradeLevel            Int
  term                  Int?
  recommendedHours      Int?
  
  // Classification
  isCore                Boolean          @default(true)
  isOptional            Boolean          @default(false)
  category              String?          // e.g., "Mathematics", "Sciences", "Languages"
  
  // Learning Framework
  learningOutcomes      Json?            // Expected learning outcomes
  keyTopics             Json?            // Core topics to cover
  skillsFramework       Json?            // Skills development framework
  
  // Prerequisites and Progressions
  prerequisites         String[]         // Array of subject codes
  followUpSubjects      String[]         // Subjects that follow this one
  
  // Assessment Guidelines
  assessmentWeights     Json?            // How different assessment types are weighted
  gradingScale          Json?            // Grading scale specifications
  
  displayOrder          Int              @default(0)
  
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt

  @@unique([globalCurriculumId, code, gradeLevel])
  @@map("global_curriculum_subjects")
}

model Curriculum {
  id          String     @id @default(uuid())
  name        String
  description String?
  version     String?
  type        CurriculumType @default(STANDARD)
  status      CurriculumStatus @default(DRAFT)
  
  schoolId    String
  school      School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  // Global Curriculum Template Reference
  globalCurriculumId String?
  globalCurriculum   GlobalCurriculum? @relation(fields: [globalCurriculumId], references: [id])
  
  // Customization Level
  customizationLevel CustomizationLevel @default(FULL) // MINIMAL, MODERATE, FULL
  originalTemplate   Json?              // Store original template for comparison
  
  // Academic Year Integration
  startYear   Int?
  endYear     Int?
  
  // Implementation Status
  implementationStatus ImplementationStatus @default(PLANNED)
  adoptionDate        DateTime?
  
  // Analytics and Tracking
  analytics           Json?              // Performance analytics
  lastReviewDate      DateTime?
  nextReviewDate      DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  user        User?    @relation(fields: [createdBy], references: [id])

  // Relationships
  curriculumSubjects CurriculumSubject[]
  classCurricula     ClassCurriculum[]
  progressTrackers   CurriculumProgressTracker[]

  @@unique([schoolId, name, version])
  @@map("curricula")
}

model CurriculumSubject {
  id                String     @id @default(uuid())
  
  curriculumId      String
  curriculum        Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  
  subjectId         String
  subject           Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  
  // Subject Configuration within Curriculum
  gradeLevel        Int
  term              Int?       // Optional term specification
  hoursPerWeek      Int?
  isCore            Boolean    @default(true)
  isOptional        Boolean    @default(false)
  prerequisites     String[]   // Array of subject IDs
  
  // Ordering and Display
  displayOrder      Int        @default(0)
  
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  // Relationships
  learningObjectives LearningObjective[]
  contentModules     ContentModule[]

  @@unique([curriculumId, subjectId, gradeLevel])
  @@map("curriculum_subjects")
}

model LearningObjective {
  id                    String            @id @default(uuid())
  title                 String
  description           String?
  type                  ObjectiveType     @default(KNOWLEDGE)
  bloomLevel            BloomLevel        @default(REMEMBER)
  
  curriculumSubjectId   String
  curriculumSubject     CurriculumSubject @relation(fields: [curriculumSubjectId], references: [id], onDelete: Cascade)
  
  // Objective Details
  expectedOutcome       String?
  assessmentCriteria    String?
  displayOrder          Int               @default(0)
  
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  @@map("learning_objectives")
}

model ContentModule {
  id                    String            @id @default(uuid())
  title                 String
  description           String?
  content               String?           // Rich text content
  duration              Int?              // Duration in hours
  
  curriculumSubjectId   String
  curriculumSubject     CurriculumSubject @relation(fields: [curriculumSubjectId], references: [id], onDelete: Cascade)
  
  // Module Organization
  unit                  String?
  chapter               String?
  displayOrder          Int               @default(0)
  
  // Resources and Materials
  resources             Json?             // URLs, documents, etc.
  activities            Json?             // Learning activities
  
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  @@map("content_modules")
}

model ClassCurriculum {
  id           String     @id @default(uuid())
  
  classId      String
  class        Class      @relation(fields: [classId], references: [id], onDelete: Cascade)
  
  curriculumId String
  curriculum   Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  
  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  
  // Implementation Status
  status       ImplementationStatus @default(PLANNED)
  startDate    DateTime?
  endDate      DateTime?
  
  // Progress Tracking
  completionPercentage Float @default(0.0) // Overall completion percentage
  milestones          Json?               // Key milestones and their completion status
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([classId, curriculumId, academicYearId])
  @@map("class_curricula")
}

// Comprehensive Progress Tracking System
model CurriculumProgressTracker {
  id                    String    @id @default(uuid())
  
  // Curriculum Reference
  curriculumId          String?
  curriculum            Curriculum? @relation(fields: [curriculumId], references: [id])
  globalCurriculumId    String?
  globalCurriculum      GlobalCurriculum? @relation(fields: [globalCurriculumId], references: [id])
  
  // Student Reference
  studentId             String
  student               Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  // Academic Context
  academicYearId        String
  academicYear          AcademicYear @relation(fields: [academicYearId], references: [id])
  classId               String
  class                 Class     @relation(fields: [classId], references: [id])
  
  // Progress Metrics
  overallProgress       Float     @default(0.0)     // 0-100 percentage
  subjectProgress       Json?                       // Progress per subject
  skillsDevelopment     Json?                       // Skills development tracking
  learningOutcomes      Json?                       // Achievement of learning outcomes
  
  // Grade Progression
  currentGrade          String?                     // Current academic grade/level
  expectedProgression   String?                     // Expected next grade
  progressionStatus     ProgressionStatus @default(ON_TRACK)
  
  // Performance Analytics
  strengths             String[]                    // Areas of strength
  weaknesses            String[]                    // Areas needing improvement
  recommendations       Json?                       // Personalized recommendations
  
  // Timestamps and Tracking
  lastAssessmentDate    DateTime?
  nextMilestoneDate     DateTime?
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@unique([studentId, curriculumId, academicYearId])
  @@map("curriculum_progress_trackers")
}

// Grade Book Management - Enhanced
model GradeBook {
  id                    String    @id @default(uuid())
  
  // Context
  schoolId              String
  school                School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  teacherId             String
  teacher               Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  classId               String
  class                 Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  subjectId             String
  subject               Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  academicYearId        String
  academicYear          AcademicYear @relation(fields: [academicYearId], references: [id])
  termId                String?
  term                  Term?     @relation(fields: [termId], references: [id])
  
  // Grade Book Configuration
  name                  String                      // e.g., "Math Grade 9A Term 1"
  gradingScale          Json                        // Grading scale configuration
  weightingScheme       Json?                       // How different assessments are weighted
  
  // Progress Tracking
  totalStudents         Int       @default(0)
  averageGrade          Float?
  progressSummary       Json?                       // Class progress summary
  
  // Status
  status                GradeBookStatus @default(ACTIVE)
  isLocked              Boolean   @default(false)   // Prevent further modifications
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relationships
  gradeEntries          GradeEntry[]
  gradeReports          GradeReport[]

  @@unique([teacherId, classId, subjectId, academicYearId, termId])
  @@map("grade_books")
}

// Individual Grade Entries
model GradeEntry {
  id                    String    @id @default(uuid())
  
  gradeBookId           String
  gradeBook             GradeBook @relation(fields: [gradeBookId], references: [id], onDelete: Cascade)
  studentId             String
  student               Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  assessmentId          String?
  assessment            Assessment? @relation(fields: [assessmentId], references: [id])
  
  // Grade Information
  rawScore              Float?                      // Raw score obtained
  maxScore              Float?                      // Maximum possible score
  percentage            Float?                      // Percentage score
  letterGrade           String?                     // A, B, C, D, F
  gradePoint            Float?                      // GPA point value
  weightedScore         Float?                      // Score after applying weights
  
  // Additional Context
  category              String?                     // "Quiz", "Test", "Assignment", etc.
  weight                Float     @default(1.0)     // Weight of this grade
  isExcused             Boolean   @default(false)   // Excused from this assessment
  
  // Feedback and Notes
  feedback              String?
  teacherNotes          String?                     // Private teacher notes
  
  // Tracking
  submittedAt           DateTime?
  gradedAt              DateTime?
  lastModified          DateTime  @default(now())
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@unique([gradeBookId, studentId, assessmentId])
  @@map("grade_entries")
}

// Multi-Level Grade Reporting System
model GradeReport {
  id                    String    @id @default(uuid())
  
  // Context
  gradeBookId           String?
  gradeBook             GradeBook? @relation(fields: [gradeBookId], references: [id])
  studentId             String
  student               Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  academicYearId        String
  academicYear          AcademicYear @relation(fields: [academicYearId], references: [id])
  termId                String?
  term                  Term?     @relation(fields: [termId], references: [id])
  
  // Report Configuration
  reportType            GradeReportType
  reportPeriod          String                      // "Term 1", "Semester 1", "Mid-Year", etc.
  
  // Grade Summary
  overallGrade          String?                     // Overall letter grade
  overallPercentage     Float?                      // Overall percentage
  overallGPA            Float?                      // Overall GPA
  classRank             Int?                        // Student's rank in class
  classSize             Int?                        // Total students in class
  
  // Subject-wise Performance
  subjectGrades         Json                        // Detailed subject grades
  progressIndicators    Json?                       // Progress in different areas
  
  // Comments and Feedback
  teacherComments       Json?                       // Comments from multiple teachers
  conductGrade          String?                     // Conduct/Behavior grade
  attendancePercentage  Float?                      // Attendance percentage
  
  // Analytics and Insights
  strengths             String[]                    // Identified strengths
  areasForImprovement   String[]                    // Areas needing work
  recommendations       String[]                    // Specific recommendations
  parentGuidance        String?                     // Guidance for parents
  
  // Status and Publishing
  status                ReportStatus @default(DRAFT)
  publishedAt           DateTime?
  parentViewedAt        DateTime?
  studentViewedAt       DateTime?
  
  // Report Generation
  generatedBy           String?                     // User who generated the report
  approvedBy            String?                     // User who approved the report
  approvedAt            DateTime?
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@unique([studentId, reportType, reportPeriod, academicYearId])
  @@map("grade_reports")
}

// Parent Engagement and Tracking
model ParentGradeAccess {
  id                    String    @id @default(uuid())
  
  guardianId            String
  guardian              Guardian  @relation(fields: [guardianId], references: [id], onDelete: Cascade)
  studentId             String
  student               Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  // Access Configuration
  hasGradeAccess        Boolean   @default(true)
  hasReportAccess       Boolean   @default(true)
  hasProgressAccess     Boolean   @default(true)
  
  // Notification Preferences
  notifyOnNewGrades     Boolean   @default(true)
  notifyOnReportCards   Boolean   @default(true)
  notifyOnProgress      Boolean   @default(true)
  
  // Access Tracking
  lastAccessDate        DateTime?
  totalAccesses         Int       @default(0)
  mostViewedSubject     String?
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@unique([guardianId, studentId])
  @@map("parent_grade_access")
}

model House {
  id          String  @id @default(uuid())
  name        String
  code        String
  color       String?
  description String?
  
  schoolId    String
  school      School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  students Student[]

  @@unique([schoolId, code])
  @@map("houses")
}

model Section {
  id          String  @id @default(uuid())
  name        String
  capacity    Int?
  description String?
  
  schoolId  String
  school    School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, name])
  @@map("sections")
}

model Class {
  id          String   @id @default(uuid())
  name        String
  grade       String
  capacity    Int?
  description String?
  
  schoolId    String
  school      School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  students            Student[]
  assessments         Assessment[]
  attendance          Attendance[]
  classTeachers       ClassTeacher[]
  studentClassHistory StudentClassHistory[]
  documents           Document[]
  classCurricula      ClassCurriculum[]
  curriculumProgressTrackers CurriculumProgressTracker[]
  gradeBooks          GradeBook[]

  @@unique([schoolId, name])
  @@map("classes")
}

// ================================
// PEOPLE MODELS
// ================================

model Student {
  id              String    @id @default(uuid())
  admissionNumber String
  firstName       String
  lastName        String
  middleName      String?
  dateOfBirth     DateTime?
  gender          Gender?
  photo           String?
  email           String?
  phone           String?
  
  // Address
  streetAddress String?
  city          String?
  state         String?
  zipCode       String?
  country       String?
  
  // Academic Information
  admissionDate DateTime  @default(now())
  status        StudentStatus @default(ACTIVE)
  
  // Relationships
  schoolId       String
  school         School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  userId         String?      @unique
  user           User?        @relation(fields: [userId], references: [id])
  currentClassId String?
  currentClass   Class?       @relation(fields: [currentClassId], references: [id])
  academicYearId String?
  academicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])
  houseId        String?
  house          House?       @relation(fields: [houseId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Activity relationships
  grades               Grade[]
  attendance           Attendance[]
  documents            Document[]
  guardianStudents     GuardianStudent[]
  studentClassHistory  StudentClassHistory[]
  
  // Grade Management relationships
  curriculumProgressTrackers CurriculumProgressTracker[]
  gradeEntries         GradeEntry[]
  gradeReports         GradeReport[]
  parentGradeAccess    ParentGradeAccess[]

  @@unique([schoolId, admissionNumber])
  @@map("students")
}

model Teacher {
  id            String    @id @default(uuid())
  employeeId    String
  firstName     String
  lastName      String
  middleName    String?
  dateOfBirth   DateTime?
  gender        Gender?
  photo         String?
  phone         String?
  
  // Address
  streetAddress String?
  city          String?
  state         String?
  zipCode       String?
  country       String?
  
  // Professional Information
  qualification String?
  experience    Int?
  joiningDate   DateTime  @default(now())
  salary        Decimal?
  status        TeacherStatus @default(ACTIVE)
  
  // Relationships
  schoolId     String
  school       School      @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  userId       String      @unique
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Activity relationships
  teacherSubjects  TeacherSubject[]
  classTeachers    ClassTeacher[]
  createdAssessments Assessment[]
  
  // Grade Management relationships
  gradeBooks       GradeBook[]

  @@unique([schoolId, employeeId])
  @@map("teachers")
}

model Staff {
  id            String    @id @default(uuid())
  employeeId    String
  firstName     String
  lastName      String
  middleName    String?
  dateOfBirth   DateTime?
  gender        Gender?
  photo         String?
  phone         String?
  
  // Address
  streetAddress String?
  city          String?
  state         String?
  zipCode       String?
  country       String?
  
  // Professional Information
  position      String
  staffType     StaffType @default(GENERAL)
  joiningDate   DateTime  @default(now())
  salary        Decimal?
  status        StaffStatus @default(ACTIVE)
  
  // Relationships
  schoolId     String
  school       School      @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  userId       String      @unique
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, employeeId])
  @@map("staff")
}

model Guardian {
  id          String  @id @default(uuid())
  firstName   String
  lastName    String
  middleName  String?
  title       String?
  dateOfBirth DateTime?
  gender      Gender?
  photo       String?
  
  // Contact Information
  email           String?
  secondaryEmail  String?
  phone           String
  alternativePhone String?
  workPhone       String?
  
  // Address
  streetAddress String?
  city          String?
  state         String?
  zipCode       String?
  country       String?
  
  // Work Address
  workStreetAddress String?
  workCity          String?
  workState         String?
  workZipCode       String?
  workCountry       String?
  
  // Professional Information
  occupation String?
  employer   String?
  
  // Portal and Communication Settings
  portalAccess Json? // { isActive, lastLogin, loginCount, preferredLanguage }
  communicationPreferences Json? // { preferredMethod, notificationSettings }
  
  // Identification Documents
  identificationDocuments Json? // Array of identification documents
  nationalId              String?
  passportNumber          String?
  
  // Status and Verification
  status             GuardianStatus @default(ACTIVE)
  verificationStatus Json? // { identity, contact, relationship }
  
  // Relationships
  schoolId   String
  school     School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  userId     String? @unique
  user       User?   @relation(fields: [userId], references: [id])
  verifiedBy String?
  verifiedByUser User? @relation("GuardianVerifiedBy", fields: [verifiedBy], references: [id])
  verificationDate DateTime?
  
  // Legacy fields for backward compatibility
  isEmergencyContact  Boolean @default(false)
  isAuthorizedPickup  Boolean @default(false)
  
  notes String?
  tags  Json? // Array of tags
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  guardianStudents GuardianStudent[]
  parentGradeAccess ParentGradeAccess[]

  @@map("guardians")
}

// ================================
// RELATIONSHIP MODELS
// ================================

model GuardianStudent {
  id String @id @default(uuid())
  
  guardianId String
  guardian   Guardian @relation(fields: [guardianId], references: [id], onDelete: Cascade)
  studentId  String
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  relationship            GuardianRelationship
  isPrimary              Boolean @default(false)
  emergencyContact       Boolean @default(false)
  authorizedPickup       Boolean @default(false)
  financialResponsibility Boolean @default(false)
  academicReportsAccess  Boolean @default(true)
  disciplinaryReportsAccess Boolean @default(true)
  medicalInfoAccess      Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([guardianId, studentId])
  @@map("guardian_students")
}

model TeacherSubject {
  id String @id @default(uuid())
  
  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  
  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teacherId, subjectId])
  @@map("teacher_subjects")
}

model ClassTeacher {
  id String @id @default(uuid())
  
  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  classId   String
  class     Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  
  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  isClassTeacher Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teacherId, classId])
  @@map("class_teachers")
}

model StudentClassHistory {
  id String @id @default(uuid())
  
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  classId   String
  class     Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  
  schoolId       String
  school         School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  
  startDate DateTime @default(now())
  endDate   DateTime?
  status    String   @default("active")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("student_class_history")
}

model SittingPosition {
  id String @id @default(uuid())
  
  studentId String
  classId   String
  position  Json // { row, column, seatNumber }
  
  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, classId])
  @@map("sitting_positions")
}

// ================================
// ASSESSMENT AND GRADING
// ================================

model Assessment {
  id          String @id @default(uuid())
  title       String
  description String?
  type        AssessmentType
  
  totalMarks   Int
  passingMarks Int
  weight       Float @default(1.0)
  duration     Int? // Duration in minutes
  
  scheduledDate DateTime?
  dueDate       DateTime?
  instructions  String?
  
  status         AssessmentStatus @default(DRAFT)
  gradingMethod  GradingMethod @default(PERCENTAGE)
  
  // Assessment Content
  questions Json? // Array of questions
  rubric    Json? // Rubric criteria
  attachments Json? // File attachments
  settings  Json? // Assessment settings
  
  // Relationships
  schoolId       String
  school         School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  subjectId      String
  subject        Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  classId        String
  class          Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  termId         String?
  term           Term?        @relation(fields: [termId], references: [id])
  teacherId      String
  teacher        Teacher      @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  createdById    String
  createdBy      User         @relation(fields: [createdById], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  grades Grade[]
  gradeEntries GradeEntry[]

  @@map("assessments")
}

model Grade {
  id            String  @id @default(uuid())
  marksObtained Float
  totalMarks    Float
  percentage    Float
  letterGrade   String?
  gpa           Float?
  points        Float?
  
  status GradeStatus @default(PENDING)
  
  // Detailed Scoring
  rubricScores   Json? // Array of rubric scores
  questionScores Json? // Array of question scores
  
  // Feedback and Notes
  feedback     String?
  privateNotes String?
  
  // Submission Details
  attempt      Int @default(1)
  submittedAt  DateTime?
  isLate       Boolean @default(false)
  daysLate     Int @default(0)
  
  // AI Grading
  aiGraded       Boolean @default(false)
  aiConfidence   Float?
  flaggedForReview Boolean @default(false)
  reviewReason   String?
  
  // Parent Viewing
  parentViewed   Boolean @default(false)
  parentViewedAt DateTime?
  
  // File Attachments
  attachments Json? // Array of file attachments
  
  // Relationships
  schoolId     String
  school       School     @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  assessmentId String
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  studentId    String
  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  gradedById   String?
  gradedBy     User?      @relation("GradedBy", fields: [gradedById], references: [id])
  gradedAt     DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([assessmentId, studentId, attempt])
  @@map("grades")
}

// ================================
// ATTENDANCE
// ================================

model Attendance {
  id     String @id @default(uuid())
  date   DateTime @default(now())
  status AttendanceStatus
  period AttendancePeriod @default(FULL_DAY)
  
  // Time tracking
  checkInTime  DateTime?
  checkOutTime DateTime?
  
  // Method and Location
  method   AttendanceMethod @default(MANUAL)
  location Json? // { latitude, longitude, address }
  
  // Notes and Modifications
  notes            String?
  parentNotified   Boolean @default(false)
  notificationSentAt DateTime?
  
  // Modification tracking
  isModified         Boolean @default(false)
  modificationReason String?
  
  // Relationships
  schoolId       String
  school         School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  studentId      String
  student        Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  classId        String
  class          Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  subjectId      String?
  markedById     String
  markedBy       User         @relation(fields: [markedById], references: [id])
  markedAt       DateTime     @default(now())
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, classId, date, period])
  @@map("attendance")
}

// ================================
// DOCUMENT MANAGEMENT
// ================================

model Document {
  id           String @id @default(uuid())
  fileName     String
  originalName String
  filePath     String
  fileUrl      String
  fileSize     BigInt
  mimeType     String
  fileExtension String?
  
  // Document Information
  title       String
  description String?
  category    DocumentCategory @default(OTHER)
  subcategory String?
  type        DocumentType @default(OTHER)
  tags        Json? // Array of tags
  
  // Access Control
  isPublic    Boolean @default(false)
  accessPermissions Json? // { roles: [], users: [], classes: [], subjects: [] }
  
  // Metadata
  metadata Json? // { dimensions, duration, pages, thumbnail }
  
  // Status and Verification
  status             DocumentStatus @default(ACTIVE)
  isVerified         Boolean @default(false)
  verificationDate   DateTime?
  
  // Document Details
  documentNumber String?
  issuedBy       String?
  issueDate      DateTime?
  expiryDate     DateTime?
  
  // Tracking
  downloadCount   Int @default(0)
  lastAccessedAt  DateTime @default(now())
  
  // Version Control
  version        Int @default(1)
  parentDocumentId String?
  parentDocument Document? @relation("DocumentVersions", fields: [parentDocumentId], references: [id])
  childDocuments Document[] @relation("DocumentVersions")
  
  // Security
  checksum   String?
  virusScan  Json? // { status, scannedAt, scanResult }
  
  // Expiration
  expiresAt DateTime?
  
  // Relationships
  schoolId      String
  school        School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  uploadedById  String
  uploadedBy    User    @relation("DocumentCreatedBy", fields: [uploadedById], references: [id])
  verifiedById  String?
  verifiedBy    User?   @relation("DocumentVerifiedBy", fields: [verifiedById], references: [id])
  
  // Entity relationships
  studentId String?
  student   Student? @relation(fields: [studentId], references: [id])
  classId   String?
  class     Class?   @relation(fields: [classId], references: [id])
  
  // Additional metadata
  notes String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("documents")
}

// ================================
// NOTIFICATIONS
// ================================

model Notification {
  id        String    @id @default(uuid())
  title     String
  message   String
  type      NotificationType
  priority  NotificationPriority @default(NORMAL)
  category  NotificationCategory @default(GENERAL)
  
  // Delivery Options
  channels  NotificationChannel[] // Multiple channels can be selected
  
  // Content and Templates
  templateId   String?
  template     NotificationTemplate? @relation(fields: [templateId], references: [id])
  templateData Json? // Dynamic data for template variables
  
  // Targeting
  targetType   NotificationTargetType
  targetUsers  String[] // Array of user IDs when targeting specific users
  targetRoles  String[] // Array of roles when targeting roles (stored as strings)
  targetClasses String[] // Array of class IDs when targeting classes
  
  // Scheduling
  scheduledAt  DateTime?
  expiresAt    DateTime?
  
  // Status and Tracking
  status       NotificationStatus @default(PENDING)
  sentAt       DateTime?
  deliveredAt  DateTime?
  readCount    Int @default(0)
  totalTargets Int @default(0)
  
  // Metadata
  metadata     Json? // Additional data like attachments, images, etc.
  
  // Relationships
  schoolId     String
  school       School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdById  String
  createdBy    User   @relation("NotificationCreatedBy", fields: [createdById], references: [id])
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  deliveryLogs NotificationDeliveryLog[]
  userNotifications UserNotification[]

  @@map("notifications")
}

model NotificationTemplate {
  id          String @id @default(uuid())
  name        String
  description String?
  type        NotificationType
  category    NotificationCategory
  
  // Template Content for different channels
  emailSubject    String?
  emailContent    String?
  emailHtml       String?
  smsContent      String?
  pushTitle       String?
  pushContent     String?
  inAppContent    String?
  
  // Template Variables
  variables       Json? // Array of available variables like {name}, {date}, etc.
  
  // Configuration
  isActive        Boolean @default(true)
  isSystem        Boolean @default(false) // System templates can't be deleted
  
  // Relationships
  schoolId        String?
  school          School? @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdById     String
  createdBy       User    @relation("NotificationTemplateCreatedBy", fields: [createdById], references: [id])
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  notifications   Notification[]

  @@unique([schoolId, name])
  @@map("notification_templates")
}

model UserNotification {
  id             String @id @default(uuid())
  
  // Relationships
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  notificationId String
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  
  // Delivery Status
  isRead         Boolean @default(false)
  readAt         DateTime?
  isDelivered    Boolean @default(false)
  deliveredAt    DateTime?
  
  // Channel specific data
  channelData    Json? // Store channel-specific delivery info
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, notificationId])
  @@map("user_notifications")
}

model NotificationDeliveryLog {
  id             String @id @default(uuid())
  
  notificationId String
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  
  // Delivery Details
  channel        NotificationChannel
  recipient      String // Email, phone, or user ID
  status         DeliveryStatus
  
  // Provider Response
  providerId     String? // Message ID from email/SMS provider
  providerResponse Json? // Full response from provider
  
  // Error Details
  errorCode      String?
  errorMessage   String?
  retryCount     Int @default(0)
  
  // Timing
  sentAt         DateTime?
  deliveredAt    DateTime?
  failedAt       DateTime?
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("notification_delivery_logs")
}

model UserNotificationPreferences {
  id       String @id @default(uuid())
  
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Global Preferences
  isEnabled Boolean @default(true)
  
  // Channel Preferences
  emailEnabled     Boolean @default(true)
  smsEnabled       Boolean @default(true)
  pushEnabled      Boolean @default(true)
  inAppEnabled     Boolean @default(true)
  
  // Category Preferences
  preferences      Json? // Detailed preferences per category and type
  
  // Quiet Hours
  quietHoursEnabled Boolean @default(false)
  quietHoursStart   String? // Time in HH:MM format
  quietHoursEnd     String? // Time in HH:MM format
  quietHoursDays    String[] // Array of days: ['MON', 'TUE', etc.]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_notification_preferences")
}

model DeviceToken {
  id         String  @id @default(uuid())
  
  userId     String
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  token      String  @unique
  platform   Platform
  deviceInfo Json?
  isActive   Boolean @default(true)
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("device_tokens")
}

model WebhookSubscription {
  id          String  @id @default(uuid())
  
  userId      String?
  user        User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  schoolId    String
  school      School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  url         String
  method      String  @default("POST")
  headers     String? // JSON string
  events      String[] // Array of event names
  description String?
  isActive    Boolean @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  deliveryLogs WebhookDeliveryLog[]

  @@map("webhook_subscriptions")
}

model WebhookDeliveryLog {
  id           String @id @default(uuid())
  
  webhookSubscriptionId String
  webhookSubscription   WebhookSubscription @relation(fields: [webhookSubscriptionId], references: [id], onDelete: Cascade)
  
  payload      String // JSON payload sent
  status       WebhookDeliveryStatus
  statusCode   Int?
  responseData String? // Response from webhook endpoint
  errorMessage String?
  attempts     Int     @default(1)
  responseTime Int?    // Response time in milliseconds
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("webhook_delivery_logs")
}

// ================================
// ENUMS
// ================================

enum UserRole {
  SUPER_ADMIN
  ADMIN
  PRINCIPAL
  VICE_PRINCIPAL
  TEACHER
  STUDENT
  PARENT
  STAFF
  LIBRARIAN
  ACCOUNTANT
  RECEPTIONIST
}

enum SchoolType {
  PRIMARY
  SECONDARY
  COLLEGE
  UNIVERSITY
  VOCATIONAL
  OTHER
}

enum SchoolStatus {
  ACTIVE
  PENDING
  SUSPENDED
  INACTIVE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  GRADUATED
  TRANSFERRED
  DROPPED_OUT
  SUSPENDED
  EXPELLED
}

enum TeacherStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
  TERMINATED
  RETIRED
}

enum StaffType {
  TEACHER
  ADMINISTRATOR
  LIBRARIAN
  ACCOUNTANT
  RECEPTIONIST
  SECURITY
  MAINTENANCE
  COUNSELOR
  NURSE
  GENERAL
}

enum StaffStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
  TERMINATED
  RETIRED
}

enum GuardianStatus {
  ACTIVE
  INACTIVE
  PENDING_VERIFICATION
  SUSPENDED
}

enum GuardianRelationship {
  FATHER
  MOTHER
  GRANDFATHER
  GRANDMOTHER
  UNCLE
  AUNT
  SIBLING
  LEGAL_GUARDIAN
  OTHER
}

enum AssessmentType {
  QUIZ
  TEST
  EXAM
  ASSIGNMENT
  PROJECT
  HOMEWORK
  PRACTICAL
  ORAL
  CONTINUOUS_ASSESSMENT
}

enum AssessmentStatus {
  DRAFT
  PUBLISHED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum GradingMethod {
  PERCENTAGE
  LETTER_GRADE
  GPA
  POINTS
  RUBRIC
}

enum GradeStatus {
  PENDING
  GRADED
  SUBMITTED
  LATE
  MISSING
  EXCUSED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
  PARTIAL
}

enum AttendancePeriod {
  MORNING
  AFTERNOON
  FULL_DAY
  PERIOD_1
  PERIOD_2
  PERIOD_3
  PERIOD_4
  PERIOD_5
  PERIOD_6
  PERIOD_7
  PERIOD_8
}

enum AttendanceMethod {
  MANUAL
  QR_CODE
  BIOMETRIC
  GEOFENCING
  BULK
}

enum AcademicTerm {
  FIRST
  SECOND
  THIRD
}

enum DocumentCategory {
  STUDENT_DOCUMENTS
  TEACHER_DOCUMENTS
  STAFF_DOCUMENTS
  ACADEMIC_MATERIALS
  ASSESSMENTS
  ASSIGNMENTS
  REPORTS
  CERTIFICATES
  FORMS
  POLICIES
  ANNOUNCEMENTS
  MEDIA
  OTHER
}

enum DocumentType {
  BIRTH_CERTIFICATE
  MEDICAL_RECORD
  IMMUNIZATION_RECORD
  PREVIOUS_SCHOOL_RECORD
  TRANSFER_CERTIFICATE
  REPORT_CARD
  ID_CARD
  PASSPORT
  VISA
  RESIDENCE_PERMIT
  GUARDIAN_ID
  FEE_RECEIPT
  SCHOLARSHIP_DOCUMENT
  SPECIAL_NEEDS_ASSESSMENT
  PHOTO
  ASSIGNMENT
  LESSON_PLAN
  CURRICULUM
  POLICY
  FORM
  CERTIFICATE
  ANNOUNCEMENT
  MEDIA
  ASSESSMENT
  GRADE_SHEET
  ATTENDANCE_RECORD
  OTHER
}

enum DocumentStatus {
  ACTIVE
  EXPIRED
  REVOKED
  PENDING_VERIFICATION
  ARCHIVED
  DELETED
}

enum NotificationType {
  SYSTEM
  ACADEMIC
  ATTENDANCE
  EXAM_RESULT
  FEE_REMINDER
  ANNOUNCEMENT
  EVENT
  EMERGENCY
  WELCOME
  PASSWORD_RESET
  GRADE_UPDATE
  ASSIGNMENT
  TIMETABLE_CHANGE
  DISCIPLINARY
  HEALTH
  TRANSPORT
  LIBRARY
  CUSTOM
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
  CRITICAL
}

enum NotificationCategory {
  GENERAL
  ACADEMIC
  ADMINISTRATIVE
  FINANCIAL
  HEALTH
  SAFETY
  EVENTS
  SYSTEM
  PERSONAL
}

enum NotificationChannel {
  EMAIL
  SMS
  PUSH
  IN_APP
  WEBHOOK
}

enum NotificationTargetType {
  ALL_USERS
  SPECIFIC_USERS
  ROLE_BASED
  CLASS_BASED
  COMBINED
}

enum NotificationStatus {
  DRAFT
  PENDING
  SCHEDULED
  SENDING
  SENT
  PARTIALLY_SENT
  FAILED
  CANCELLED
  EXPIRED
}

enum DeliveryStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  BOUNCED
  REJECTED
  RETRYING
}

enum Platform {
  ANDROID
  IOS
  WEB
  WINDOWS
  MACOS
  LINUX
}

enum WebhookDeliveryStatus {
  SUCCESS
  FAILED
  PENDING
  RETRYING
}

// Curriculum-related Enums
enum CurriculumType {
  STANDARD
  CAMBRIDGE
  IB
  NATIONAL
  STEM
  ARTS
  VOCATIONAL
  CUSTOM
}

enum CurriculumStatus {
  DRAFT
  ACTIVE
  INACTIVE
  ARCHIVED
  UNDER_REVIEW
}

enum ObjectiveType {
  KNOWLEDGE
  COMPREHENSION
  APPLICATION
  ANALYSIS
  SYNTHESIS
  EVALUATION
  SKILL
  ATTITUDE
}

enum BloomLevel {
  REMEMBER
  UNDERSTAND
  APPLY
  ANALYZE
  EVALUATE
  CREATE
}

enum ImplementationStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  PAUSED
  CANCELLED
}

// New Enums for Enhanced Grade Management System

enum CustomizationLevel {
  MINIMAL     // Minor changes to original template
  MODERATE    // Significant customizations while keeping core structure
  FULL        // Complete custom curriculum
}

enum ProgressionStatus {
  AHEAD       // Student is ahead of expected progression
  ON_TRACK    // Student is progressing as expected
  BEHIND      // Student is behind expected progression
  AT_RISK     // Student is significantly behind and at risk
}

enum GradeBookStatus {
  ACTIVE      // Currently active grade book
  ARCHIVED    // Archived for historical reference
  LOCKED      // Locked to prevent changes
  DRAFT       // Draft state, not yet published
}

enum GradeReportType {
  TERM_REPORT       // End of term report
  SEMESTER_REPORT   // Semester report
  ANNUAL_REPORT     // Annual report
  PROGRESS_REPORT   // Mid-term progress report
  PARENT_CONFERENCE // Parent-teacher conference report
  TRANSCRIPT        // Official academic transcript
  CUSTOM           // Custom report type
}

enum ReportStatus {
  DRAFT           // Report is being prepared
  PENDING_REVIEW  // Report is ready for review
  APPROVED        // Report has been approved
  PUBLISHED       // Report has been published
  SENT            // Report has been sent to parents/students
  ARCHIVED        // Report has been archived
}
