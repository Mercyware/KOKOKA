generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id                          String                       @id @default(uuid())
  name                        String                       @unique
  slug                        String                       @unique
  subdomain                   String                       @unique
  logo                        String?
  description                 String?
  established                 DateTime?
  type                        SchoolType                   @default(SECONDARY)
  status                      SchoolStatus                 @default(PENDING)
  streetAddress               String?
  city                        String?
  state                       String?
  zipCode                     String?
  country                     String?
  email                       String?
  phone                       String?
  website                     String?
  settings                    Json?
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  academicCalendars           AcademicCalendar[]
  academicYears               AcademicYear[]
  assessments                 Assessment[]
  attendance                  Attendance[]
  attendancePolicies          AttendancePolicy[]
  attendanceReports           AttendanceReport[]
  attendanceSessions          AttendanceSession[]
  bookIssues                  BookIssue[]
  books                       Book[]
  classSubjectHistory         ClassSubjectHistory[]
  classTeachers               ClassTeacher[]
  classes                     Class[]
  curricula                   Curriculum[]
  departments                 Department[]
  documents                   Document[]
  files                       FileManager[]
  gradeBooks                  GradeBook[]
  gradeScales                 GradeScale[]
  grades                      Grade[]
  guardians                   Guardian[]
  hostelAllocations           HostelAllocation[]
  hostelFees                  HostelFee[]
  hostels                     Hostel[]
  houses                      House[]
  inventoryAllocations        InventoryAllocation[]
  inventoryCategories         InventoryCategory[]
  inventoryItems              InventoryItem[]
  inventoryTransactions       InventoryTransaction[]
  messageThreads              MessageThread[]
  messages                    Message[]
  notificationTemplates       NotificationTemplate[]
  notifications               Notification[]
  reportBatches               ReportBatch[]
  reportCardTemplates         ReportCardTemplate[]
  results                     Result[]
  sections                    Section[]
  sittingPositions            SittingPosition[]
  staff                       Staff[]
  studentClassHistory         StudentClassHistory[]
  studentTransportAssignments StudentTransportAssignment[]
  students                    Student[]
  subjectAssignments          SubjectAssignment[]
  subjects                    Subject[]
  teacherSubjects             TeacherSubject[]
  terms                       Term[]
  transportRoutes             TransportRoute[]
  users                       User[]
  vehicles                    Vehicle[]
  webhookSubscriptions        WebhookSubscription[]

  @@map("schools")
}

model User {
  id                           String                       @id @default(uuid())
  email                        String                       @unique
  passwordHash                 String
  name                         String
  role                         UserRole
  isActive                     Boolean                      @default(true)
  emailVerified                Boolean                      @default(false)
  lastLogin                    DateTime?
  profileData                  Json?
  profileImage                 String?
  googleId                     String?                      @unique
  linkedinId                   String?                      @unique
  schoolId                     String
  createdAt                    DateTime                     @default(now())
  updatedAt                    DateTime                     @updatedAt
  createdAcademicCalendars     AcademicCalendar[]           @relation("AcademicCalendarCreatedBy")
  createdAssessments           Assessment[]
  markedAttendance             Attendance[]                 @relation("AttendanceMarkedBy")
  modifiedAttendance           Attendance[]                 @relation("AttendanceModifiedBy")
  generatedAttendanceReports   AttendanceReport[]
  issuedBooks                  BookIssue[]                  @relation("IssuedBy")
  returnedBooks                BookIssue[]                  @relation("ReturnedBy")
  createdCurricula             Curriculum[]
  deviceTokens                 DeviceToken[]
  createdDocuments             Document[]                   @relation("DocumentCreatedBy")
  verifiedDocuments            Document[]                   @relation("DocumentVerifiedBy")
  uploadedFiles                FileManager[]
  gradedAssessments            Grade[]                      @relation("GradedBy")
  guardian                     Guardian?
  verifiedGuardians            Guardian[]                   @relation("GuardianVerifiedBy")
  inventoryAllocations         InventoryAllocation[]
  inventoryTransactions        InventoryTransaction[]
  receivedMessages             MessageRecipient[]           @relation("MessageRecipient")
  threadParticipants           MessageThreadParticipant[]
  createdThreads               MessageThread[]              @relation("ThreadCreator")
  sentMessages                 Message[]                    @relation("MessageSender")
  createdNotificationTemplates NotificationTemplate[]       @relation("NotificationTemplateCreatedBy")
  createdNotifications         Notification[]               @relation("NotificationCreatedBy")
  createdReportBatches         ReportBatch[]                @relation("ReportBatchCreatedBy")
  createdReportCardTemplates   ReportCardTemplate[]         @relation("ReportCardTemplateCreatedBy")
  approvedReportCards          ReportCard[]                 @relation("ReportCardApprovedBy")
  generatedReportCards         ReportCard[]                 @relation("ReportCardGeneratedBy")
  staff                        Staff?
  student                      Student?
  notificationPreferences      UserNotificationPreferences?
  userNotifications            UserNotification[]
  school                       School                       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  webhookSubscriptions         WebhookSubscription[]

  @@map("users")
}

model FileManager {
  id              String       @id @default(uuid())
  fileName        String
  fileKey         String       @unique
  fileUrl         String
  fileSize        Int
  mimeType        String
  category        FileCategory @default(OTHER)
  originalName    String?
  dimensions      Json?
  compressed      Boolean      @default(false)
  entityType      String?
  entityId        String?
  uploadedById    String?
  schoolId        String
  status          FileStatus   @default(ACTIVE)
  isPublic        Boolean      @default(false)
  description     String?
  tags            String[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  school          School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  uploadedBy      User?        @relation(fields: [uploadedById], references: [id])
  studentProfiles Student?     @relation("StudentProfilePicture")
  // staffProfiles   Staff?       @relation("StaffProfilePicture")

  @@map("file_manager")
}

model AcademicYear {
  id                          String                       @id @default(uuid())
  name                        String
  startDate                   DateTime
  endDate                     DateTime
  isCurrent                   Boolean                      @default(false)
  schoolId                    String
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  academicCalendars           AcademicCalendar[]
  school                      School                       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  assessments                 Assessment[]
  attendance                  Attendance[]
  classCurricula              ClassCurriculum[]
  classSubjectHistory         ClassSubjectHistory[]
  classTeachers               ClassTeacher[]
  curriculumProgressTrackers  CurriculumProgressTracker[]
  gradeBooks                  GradeBook[]
  gradeReports                GradeReport[]
  hostelAllocations           HostelAllocation[]
  hostelFees                  HostelFee[]
  reportBatches               ReportBatch[]
  reportCards                 ReportCard[]
  studentClassHistory         StudentClassHistory[]
  studentTransportAssignments StudentTransportAssignment[]
  students                    Student[]
  subjectAssignments          SubjectAssignment[]
  terms                       Term[]

  @@unique([schoolId, name])
  @@map("academic_years")
}

model Term {
  id             String        @id @default(uuid())
  name           String
  startDate      DateTime
  endDate        DateTime
  schoolId       String
  academicYearId String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  assessments    Assessment[]
  attendance     Attendance[]
  gradeBooks     GradeBook[]
  gradeReports   GradeReport[]
  reportBatches  ReportBatch[]
  reportCards    ReportCard[]
  results        Result[]
  academicYear   AcademicYear  @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  school         School        @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@unique([schoolId, academicYearId, name])
  @@map("terms")
}

model AcademicCalendar {
  id             String       @id @default(uuid())
  term           AcademicTerm
  startDate      DateTime
  endDate        DateTime
  holidays       Json?
  schoolId       String
  academicYearId String
  createdById    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  createdBy      User?        @relation("AcademicCalendarCreatedBy", fields: [createdById], references: [id])
  school         School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@unique([schoolId, academicYearId, term])
  @@map("academic_calendars")
}

model Department {
  id          String    @id @default(uuid())
  name        String
  code        String
  description String?
  headOfDept  String?
  schoolId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  school      School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  staff       Staff[]
  subjects    Subject[]

  @@unique([schoolId, code])
  @@map("departments")
}

model Subject {
  id                  String                @id @default(uuid())
  name                String
  code                String
  description         String?
  credits             Int?
  schoolId            String
  departmentId        String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  assessments         Assessment[]
  attendance          Attendance[]
  classSubjectHistory ClassSubjectHistory[]
  curriculumSubjects  CurriculumSubject[]
  gradeBooks          GradeBook[]
  subjectAssignments  SubjectAssignment[]
  subjectResults      SubjectResult[]
  department          Department?           @relation(fields: [departmentId], references: [id])
  school              School                @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  teacherSubjects     TeacherSubject[]

  @@unique([schoolId, code])
  @@map("subjects")
}

model GlobalCurriculum {
  id                        String                      @id @default(uuid())
  name                      String                      @unique
  description               String?
  version                   String?
  type                      CurriculumType              @default(STANDARD)
  provider                  String
  country                   String?
  language                  String                      @default("en")
  minGrade                  Int                         @default(1)
  maxGrade                  Int                         @default(12)
  framework                 Json?
  standards                 Json?
  assessmentTypes           Json?
  status                    CurriculumStatus            @default(ACTIVE)
  isOfficial                Boolean                     @default(false)
  licenseType               String                      @default("FREE")
  adoptionCount             Int                         @default(0)
  tags                      String[]
  difficulty                String                      @default("STANDARD")
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  schoolCurricula           Curriculum[]
  curriculumProgressTracker CurriculumProgressTracker[]
  globalSubjects            GlobalCurriculumSubject[]

  @@map("global_curricula")
}

model GlobalCurriculumSubject {
  id                 String           @id @default(uuid())
  globalCurriculumId String
  name               String
  code               String
  description        String?
  gradeLevel         Int
  term               Int?
  recommendedHours   Int?
  isCore             Boolean          @default(true)
  isOptional         Boolean          @default(false)
  category           String?
  learningOutcomes   Json?
  keyTopics          Json?
  skillsFramework    Json?
  prerequisites      String[]
  followUpSubjects   String[]
  assessmentWeights  Json?
  gradingScale       Json?
  displayOrder       Int              @default(0)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  globalCurriculum   GlobalCurriculum @relation(fields: [globalCurriculumId], references: [id], onDelete: Cascade)

  @@unique([globalCurriculumId, code, gradeLevel])
  @@map("global_curriculum_subjects")
}

model Curriculum {
  id                   String                      @id @default(uuid())
  name                 String
  description          String?
  version              String?
  type                 CurriculumType              @default(STANDARD)
  status               CurriculumStatus            @default(DRAFT)
  schoolId             String
  startYear            Int?
  endYear              Int?
  createdAt            DateTime                    @default(now())
  updatedAt            DateTime                    @updatedAt
  createdBy            String?
  adoptionDate         DateTime?
  analytics            Json?
  customizationLevel   CustomizationLevel          @default(FULL)
  globalCurriculumId   String?
  implementationStatus ImplementationStatus        @default(PLANNED)
  lastReviewDate       DateTime?
  nextReviewDate       DateTime?
  originalTemplate     Json?
  classCurricula       ClassCurriculum[]
  user                 User?                       @relation(fields: [createdBy], references: [id])
  globalCurriculum     GlobalCurriculum?           @relation(fields: [globalCurriculumId], references: [id])
  school               School                      @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  progressTrackers     CurriculumProgressTracker[]
  curriculumSubjects   CurriculumSubject[]

  @@unique([schoolId, name, version])
  @@map("curricula")
}

model CurriculumSubject {
  id                 String              @id @default(uuid())
  curriculumId       String
  subjectId          String
  gradeLevel         Int
  term               Int?
  hoursPerWeek       Int?
  isCore             Boolean             @default(true)
  isOptional         Boolean             @default(false)
  prerequisites      String[]
  displayOrder       Int                 @default(0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  contentModules     ContentModule[]
  curriculum         Curriculum          @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  subject            Subject             @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  learningObjectives LearningObjective[]

  @@unique([curriculumId, subjectId, gradeLevel])
  @@map("curriculum_subjects")
}

model LearningObjective {
  id                  String            @id @default(uuid())
  title               String
  description         String?
  type                ObjectiveType     @default(KNOWLEDGE)
  bloomLevel          BloomLevel        @default(REMEMBER)
  curriculumSubjectId String
  expectedOutcome     String?
  assessmentCriteria  String?
  displayOrder        Int               @default(0)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  curriculumSubject   CurriculumSubject @relation(fields: [curriculumSubjectId], references: [id], onDelete: Cascade)

  @@map("learning_objectives")
}

model ContentModule {
  id                  String            @id @default(uuid())
  title               String
  description         String?
  content             String?
  duration            Int?
  curriculumSubjectId String
  unit                String?
  chapter             String?
  displayOrder        Int               @default(0)
  resources           Json?
  activities          Json?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  curriculumSubject   CurriculumSubject @relation(fields: [curriculumSubjectId], references: [id], onDelete: Cascade)

  @@map("content_modules")
}

model ClassCurriculum {
  id                   String               @id @default(uuid())
  classId              String
  curriculumId         String
  academicYearId       String
  status               ImplementationStatus @default(PLANNED)
  startDate            DateTime?
  endDate              DateTime?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  completionPercentage Float                @default(0.0)
  milestones           Json?
  academicYear         AcademicYear         @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  class                Class                @relation(fields: [classId], references: [id], onDelete: Cascade)
  curriculum           Curriculum           @relation(fields: [curriculumId], references: [id], onDelete: Cascade)

  @@unique([classId, curriculumId, academicYearId])
  @@map("class_curricula")
}

model CurriculumProgressTracker {
  id                  String            @id @default(uuid())
  curriculumId        String?
  globalCurriculumId  String?
  studentId           String
  academicYearId      String
  classId             String
  overallProgress     Float             @default(0.0)
  subjectProgress     Json?
  skillsDevelopment   Json?
  learningOutcomes    Json?
  currentGrade        String?
  expectedProgression String?
  progressionStatus   ProgressionStatus @default(ON_TRACK)
  strengths           String[]
  weaknesses          String[]
  recommendations     Json?
  lastAssessmentDate  DateTime?
  nextMilestoneDate   DateTime?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  academicYear        AcademicYear      @relation(fields: [academicYearId], references: [id])
  class               Class             @relation(fields: [classId], references: [id])
  curriculum          Curriculum?       @relation(fields: [curriculumId], references: [id])
  globalCurriculum    GlobalCurriculum? @relation(fields: [globalCurriculumId], references: [id])
  student             Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, curriculumId, academicYearId])
  @@map("curriculum_progress_trackers")
}

model GradeBook {
  id              String          @id @default(uuid())
  schoolId        String
  staffId         String
  classId         String
  subjectId       String
  academicYearId  String
  termId          String?
  name            String
  gradingScale    Json
  weightingScheme Json?
  totalStudents   Int             @default(0)
  averageGrade    Float?
  progressSummary Json?
  status          GradeBookStatus @default(ACTIVE)
  isLocked        Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  academicYear    AcademicYear    @relation(fields: [academicYearId], references: [id])
  class           Class           @relation(fields: [classId], references: [id], onDelete: Cascade)
  school          School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  staff           Staff           @relation(fields: [staffId], references: [id], onDelete: Cascade)
  subject         Subject         @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  term            Term?           @relation(fields: [termId], references: [id])
  gradeEntries    GradeEntry[]
  gradeReports    GradeReport[]

  @@unique([staffId, classId, subjectId, academicYearId, termId])
  @@map("grade_books")
}

model GradeEntry {
  id            String      @id @default(uuid())
  gradeBookId   String
  studentId     String
  assessmentId  String?
  rawScore      Float?
  maxScore      Float?
  percentage    Float?
  letterGrade   String?
  gradePoint    Float?
  weightedScore Float?
  category      String?
  weight        Float       @default(1.0)
  isExcused     Boolean     @default(false)
  feedback      String?
  teacherNotes  String?
  submittedAt   DateTime?
  gradedAt      DateTime?
  lastModified  DateTime    @default(now())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  assessment    Assessment? @relation(fields: [assessmentId], references: [id])
  gradeBook     GradeBook   @relation(fields: [gradeBookId], references: [id], onDelete: Cascade)
  student       Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([gradeBookId, studentId, assessmentId])
  @@map("grade_entries")
}

model GradeReport {
  id                   String          @id @default(uuid())
  gradeBookId          String?
  studentId            String
  academicYearId       String
  termId               String?
  reportType           GradeReportType
  reportPeriod         String
  overallGrade         String?
  overallPercentage    Float?
  overallGPA           Float?
  classRank            Int?
  classSize            Int?
  subjectGrades        Json
  progressIndicators   Json?
  teacherComments      Json?
  conductGrade         String?
  attendancePercentage Float?
  strengths            String[]
  areasForImprovement  String[]
  recommendations      String[]
  parentGuidance       String?
  status               ReportStatus    @default(DRAFT)
  publishedAt          DateTime?
  parentViewedAt       DateTime?
  studentViewedAt      DateTime?
  generatedBy          String?
  approvedBy           String?
  approvedAt           DateTime?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  academicYear         AcademicYear    @relation(fields: [academicYearId], references: [id])
  gradeBook            GradeBook?      @relation(fields: [gradeBookId], references: [id])
  student              Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  term                 Term?           @relation(fields: [termId], references: [id])

  @@unique([studentId, reportType, reportPeriod, academicYearId])
  @@map("grade_reports")
}

model ReportCardTemplate {
  id                 String          @id @default(uuid())
  name               String
  description        String?
  type               GradeReportType
  layout             Json
  subjectOrder       String[]
  includeAttendance  Boolean         @default(true)
  includeConduct     Boolean         @default(true)
  includeCreditHours Boolean         @default(false)
  includeClassRank   Boolean         @default(false)
  includeGPA         Boolean         @default(true)
  includePercentile  Boolean         @default(false)
  includeComments    Boolean         @default(true)
  includeSignatures  Boolean         @default(true)
  gradingScale       Json
  passingGrade       String          @default("D")
  showLetterGrades   Boolean         @default(true)
  showPercentages    Boolean         @default(true)
  showGPA            Boolean         @default(true)
  headerText         String?
  footerText         String?
  logoUrl            String?
  colors             Json?
  fonts              Json?
  pageSize           String          @default("A4")
  orientation        String          @default("portrait")
  isActive           Boolean         @default(true)
  isDefault          Boolean         @default(false)
  isSystem           Boolean         @default(false)
  schoolId           String
  createdById        String
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  reportBatches      ReportBatch[]
  createdBy          User            @relation("ReportCardTemplateCreatedBy", fields: [createdById], references: [id])
  school             School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  reportCards        ReportCard[]

  @@unique([schoolId, name])
  @@map("report_card_templates")
}

model ReportCard {
  id                String             @id @default(uuid())
  studentId         String
  academicYearId    String
  termId            String?
  classId           String?
  templateId        String
  reportType        GradeReportType
  reportPeriod      String
  generatedData     Json
  subjectGrades     Json
  overallSummary    Json
  overallGrade      String?
  overallPercentage Float?
  overallGPA        Float?
  classRank         Int?
  classSize         Int?
  attendanceData    Json?
  conductGrade      String?
  teacherComments   Json?
  status            ReportStatus       @default(DRAFT)
  publishedAt       DateTime?
  parentViewedAt    DateTime?
  studentViewedAt   DateTime?
  generatedBy       String
  approvedBy        String?
  approvedAt        DateTime?
  pdfUrl            String?
  pdfStoragePath    String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  academicYear      AcademicYear       @relation(fields: [academicYearId], references: [id])
  approvedByUser    User?              @relation("ReportCardApprovedBy", fields: [approvedBy], references: [id])
  class             Class?             @relation(fields: [classId], references: [id])
  generatedByUser   User               @relation("ReportCardGeneratedBy", fields: [generatedBy], references: [id])
  student           Student            @relation(fields: [studentId], references: [id], onDelete: Cascade)
  template          ReportCardTemplate @relation(fields: [templateId], references: [id])
  term              Term?              @relation(fields: [termId], references: [id])

  @@unique([studentId, reportType, reportPeriod, academicYearId, termId])
  @@map("report_cards")
}

model ReportBatch {
  id                String                @id @default(uuid())
  name              String
  description       String?
  academicYearId    String
  termId            String?
  classIds          String[]
  studentIds        String[]
  templateId        String
  reportType        GradeReportType
  reportPeriod      String
  status            BatchProcessingStatus @default(PENDING)
  totalStudents     Int
  processedStudents Int                   @default(0)
  successfulReports Int                   @default(0)
  failedReports     Int                   @default(0)
  startedAt         DateTime?
  completedAt       DateTime?
  errorLog          Json?
  bulkPdfUrl        String?
  individualPdfsUrl String?
  createdById       String
  schoolId          String
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  academicYear      AcademicYear          @relation(fields: [academicYearId], references: [id])
  createdBy         User                  @relation("ReportBatchCreatedBy", fields: [createdById], references: [id])
  school            School                @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  template          ReportCardTemplate    @relation(fields: [templateId], references: [id])
  term              Term?                 @relation(fields: [termId], references: [id])

  @@map("report_batches")
}

model ParentGradeAccess {
  id                  String    @id @default(uuid())
  guardianId          String
  studentId           String
  hasGradeAccess      Boolean   @default(true)
  hasReportAccess     Boolean   @default(true)
  hasProgressAccess   Boolean   @default(true)
  notifyOnNewGrades   Boolean   @default(true)
  notifyOnReportCards Boolean   @default(true)
  notifyOnProgress    Boolean   @default(true)
  lastAccessDate      DateTime?
  totalAccesses       Int       @default(0)
  mostViewedSubject   String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  guardian            Guardian  @relation(fields: [guardianId], references: [id], onDelete: Cascade)
  student             Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([guardianId, studentId])
  @@map("parent_grade_access")
}

model House {
  id          String    @id @default(uuid())
  name        String
  code        String
  color       String?
  description String?
  schoolId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  school      School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  students    Student[]

  @@unique([schoolId, code])
  @@map("houses")
}

model Section {
  id                  String                @id @default(uuid())
  name                String
  capacity            Int?
  schoolId            String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  description         String?
  school              School                @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  studentClassHistory StudentClassHistory[]
  students            Student[]
  subjectAssignments  SubjectAssignment[]

  @@unique([schoolId, name])
  @@map("sections")
}

model Class {
  id                         String                      @id @default(uuid())
  name                       String
  grade                      String
  capacity                   Int?
  description                String?
  schoolId                   String
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  assessments                Assessment[]
  attendance                 Attendance[]
  attendanceSessions         AttendanceSession[]
  classCurricula             ClassCurriculum[]
  classSubjectHistory        ClassSubjectHistory[]
  classTeachers              ClassTeacher[]
  school                     School                      @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  curriculumProgressTrackers CurriculumProgressTracker[]
  documents                  Document[]
  gradeBooks                 GradeBook[]
  reportCards                ReportCard[]
  results                    Result[]
  studentClassHistory        StudentClassHistory[]
  students                   Student[]
  subjectAssignments         SubjectAssignment[]

  @@unique([schoolId, name])
  @@map("classes")
}

model Student {
  id                         String                       @id @default(uuid())
  admissionNumber            String
  firstName                  String
  lastName                   String
  middleName                 String?
  dateOfBirth                DateTime?
  gender                     Gender?
  photo                      String?
  email                      String?
  phone                      String?
  streetAddress              String?
  city                       String?
  state                      String?
  zipCode                    String?
  country                    String?
  admissionDate              DateTime                     @default(now())
  status                     StudentStatus                @default(ACTIVE)
  schoolId                   String
  userId                     String?                      @unique
  currentClassId             String?
  academicYearId             String?
  houseId                    String?
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  admissionTestScore         Float?
  allergies                  String[]
  applicationDate            DateTime?
  behavioralNotes            String?
  bloodGroup                 String?
  currentSectionId           String?
  doctorName                 String?
  doctorPhone                String?
  documentsSubmitted         String[]
  emergencyContacts          Json?
  emergencyMedicalInfo       String?
  extracurriculars           String[]
  feesPaid                   Float?
  hospitalPreference         String?
  identificationDocs         Json?
  immunizations              Json?
  interviewDate              DateTime?
  languagesSpoken            String[]
  medicalConditions          String[]
  medicalInfo                Json?
  medications                Json?
  motherTongue               String?
  nationality                String?
  permanentCity              String?
  permanentCountry           String?
  permanentState             String?
  permanentStreetAddress     String?
  permanentZipCode           String?
  photographs                Json?
  placeOfBirth               String?
  previousAcademicRecord     Json?
  previousClass              String?
  previousSchool             String?
  profilePictureId           String?                      @unique
  religion                   String?
  scholarshipInfo            Json?
  socialBackground           String?
  specialNeeds               String?
  talents                    String[]
  tcDate                     DateTime?
  tcNumber                   String?
  transportInfo              Json?
  attendance                 Attendance[]
  bookIssues                 BookIssue[]
  curriculumProgressTrackers CurriculumProgressTracker[]
  documents                  Document[]
  gradeEntries               GradeEntry[]
  gradeReports               GradeReport[]
  grades                     Grade[]
  guardianStudents           GuardianStudent[]
  hostelAllocations          HostelAllocation[]
  parentGradeAccess          ParentGradeAccess[]
  reportCards                ReportCard[]
  results                    Result[]
  studentClassHistory        StudentClassHistory[]
  transportAssignments       StudentTransportAssignment[]
  academicYear               AcademicYear?                @relation(fields: [academicYearId], references: [id])
  currentClass               Class?                       @relation(fields: [currentClassId], references: [id])
  currentSection             Section?                     @relation(fields: [currentSectionId], references: [id])
  house                      House?                       @relation(fields: [houseId], references: [id])
  profilePicture             FileManager?                 @relation("StudentProfilePicture", fields: [profilePictureId], references: [id])
  school                     School                       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user                       User?                        @relation(fields: [userId], references: [id])

  @@unique([schoolId, admissionNumber])
  @@map("students")
}

model Staff {
  id                  String                @id @default(uuid())
  employeeId          String
  firstName           String
  lastName            String
  middleName          String?
  dateOfBirth         DateTime?
  gender              Gender?
  photo               String?
  profilePictureId    String?      @unique
  phone               String?
  streetAddress       String?
  city                String?
  state               String?
  zipCode             String?
  country             String?
  position            String
  joiningDate         DateTime              @default(now())
  salary              Decimal?
  status              StaffStatus           @default(ACTIVE)
  schoolId            String
  userId              String                @unique
  departmentId        String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  staffType           StaffType             @default(GENERAL)
  experience          Int?
  qualification       String?
  createdAssessments  Assessment[]
  classSubjectHistory ClassSubjectHistory[]
  classTeachers       ClassTeacher[]
  gradeBooks          GradeBook[]
  hostels             Hostel[]
  department          Department?           @relation(fields: [departmentId], references: [id])
  school              School                @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  subjectAssignments  SubjectAssignment[]
  teacherSubjects     TeacherSubject[]
  // profilePicture      FileManager?  @relation("StaffProfilePicture", fields: [profilePictureId], references: [id])

  @@unique([schoolId, employeeId])
  @@map("staff")
}

model Guardian {
  id                       String              @id @default(uuid())
  firstName                String
  lastName                 String
  middleName               String?
  title                    String?
  dateOfBirth              DateTime?
  gender                   Gender?
  photo                    String?
  email                    String?
  secondaryEmail           String?
  phone                    String
  alternativePhone         String?
  workPhone                String?
  streetAddress            String?
  city                     String?
  state                    String?
  zipCode                  String?
  country                  String?
  workStreetAddress        String?
  workCity                 String?
  workState                String?
  workZipCode              String?
  workCountry              String?
  occupation               String?
  employer                 String?
  portalAccess             Json?
  communicationPreferences Json?
  identificationDocuments  Json?
  nationalId               String?
  passportNumber           String?
  status                   GuardianStatus      @default(ACTIVE)
  verificationStatus       Json?
  schoolId                 String
  userId                   String?             @unique
  verifiedBy               String?
  verificationDate         DateTime?
  isEmergencyContact       Boolean             @default(false)
  isAuthorizedPickup       Boolean             @default(false)
  notes                    String?
  tags                     Json?
  createdAt                DateTime            @default(now())
  updatedAt                DateTime            @updatedAt
  guardianStudents         GuardianStudent[]
  school                   School              @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user                     User?               @relation(fields: [userId], references: [id])
  verifiedByUser           User?               @relation("GuardianVerifiedBy", fields: [verifiedBy], references: [id])
  parentGradeAccess        ParentGradeAccess[]

  @@map("guardians")
}

model GuardianStudent {
  id                        String               @id @default(uuid())
  guardianId                String
  studentId                 String
  relationship              GuardianRelationship
  isPrimary                 Boolean              @default(false)
  emergencyContact          Boolean              @default(false)
  authorizedPickup          Boolean              @default(false)
  financialResponsibility   Boolean              @default(false)
  academicReportsAccess     Boolean              @default(true)
  disciplinaryReportsAccess Boolean              @default(true)
  medicalInfoAccess         Boolean              @default(false)
  createdAt                 DateTime             @default(now())
  updatedAt                 DateTime             @updatedAt
  guardian                  Guardian             @relation(fields: [guardianId], references: [id], onDelete: Cascade)
  student                   Student              @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([guardianId, studentId])
  @@map("guardian_students")
}

model TeacherSubject {
  id        String   @id @default(uuid())
  subjectId String
  schoolId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  staffId   String
  school    School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  staff     Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([staffId, subjectId])
  @@map("teacher_subjects")
}

model ClassTeacher {
  id                  String             @id @default(uuid())
  classId             String
  schoolId            String
  isClassTeacher      Boolean            @default(true)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  academicYearId      String
  assignedDate        DateTime           @default(now())
  canGradeAssignments Boolean            @default(true)
  canManageClassroom  Boolean            @default(false)
  canMarkAttendance   Boolean            @default(true)
  endDate             DateTime?
  isSubjectTeacher    Boolean            @default(false)
  notes               String?
  staffId             String
  startDate           DateTime?
  status              ClassTeacherStatus @default(ACTIVE)
  subjects            String[]
  academicYear        AcademicYear       @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  class               Class              @relation(fields: [classId], references: [id], onDelete: Cascade)
  school              School             @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  staff               Staff              @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([staffId, classId, academicYearId])
  @@map("class_teachers")
}

model StudentClassHistory {
  id             String       @id @default(uuid())
  studentId      String
  classId        String
  schoolId       String
  academicYearId String
  startDate      DateTime     @default(now())
  endDate        DateTime?
  status         String       @default("active")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  sectionId      String?
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  class          Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  school         School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  section        Section?     @relation(fields: [sectionId], references: [id])
  student        Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("student_class_history")
}

model ClassSubjectHistory {
  id             String             @id @default(uuid())
  classId        String
  subjectId      String
  academicYearId String
  schoolId       String
  isCore         Boolean            @default(true)
  isOptional     Boolean            @default(false)
  credits        Int?
  hoursPerWeek   Int?
  term           Int?
  semester       Int?
  staffId        String?
  status         ClassSubjectStatus @default(ACTIVE)
  startDate      DateTime           @default(now())
  endDate        DateTime?
  maxStudents    Int?
  prerequisites  String[]
  description    String?
  gradingScale   Json?
  passingGrade   Float?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  academicYear   AcademicYear       @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  class          Class              @relation(fields: [classId], references: [id], onDelete: Cascade)
  school         School             @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  assignedStaff  Staff?             @relation(fields: [staffId], references: [id])
  subject        Subject            @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([classId, subjectId, academicYearId, term])
  @@map("class_subject_history")
}

model SubjectAssignment {
  id                String                  @id @default(uuid())
  staffId           String
  subjectId         String
  classId           String
  academicYearId    String
  schoolId          String
  sectionId         String?
  assignedDate      DateTime                @default(now())
  startDate         DateTime?
  endDate           DateTime?
  status            SubjectAssignmentStatus @default(ACTIVE)
  hoursPerWeek      Int?
  term              Int?
  semester          Int?
  isMainTeacher     Boolean                 @default(true)
  canGrade          Boolean                 @default(true)
  canMarkAttendance Boolean                 @default(true)
  notes             String?
  description       String?
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  academicYear      AcademicYear            @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  class             Class                   @relation(fields: [classId], references: [id], onDelete: Cascade)
  school            School                  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  section           Section?                @relation(fields: [sectionId], references: [id])
  staff             Staff                   @relation(fields: [staffId], references: [id], onDelete: Cascade)
  subject           Subject                 @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([staffId, subjectId, classId, sectionId, academicYearId])
  @@map("subject_assignments")
}

model SittingPosition {
  id        String   @id @default(uuid())
  studentId String
  classId   String
  position  Json
  schoolId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  school    School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@unique([studentId, classId])
  @@map("sitting_positions")
}

model Assessment {
  id             String           @id @default(uuid())
  title          String
  description    String?
  type           AssessmentType
  totalMarks     Int
  passingMarks   Int
  weight         Float            @default(1.0)
  duration       Int?
  scheduledDate  DateTime?
  dueDate        DateTime?
  instructions   String?
  status         AssessmentStatus @default(DRAFT)
  gradingMethod  GradingMethod    @default(PERCENTAGE)
  questions      Json?
  rubric         Json?
  attachments    Json?
  settings       Json?
  schoolId       String
  subjectId      String
  classId        String
  academicYearId String
  termId         String?
  createdById    String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  staffId        String
  academicYear   AcademicYear     @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  class          Class            @relation(fields: [classId], references: [id], onDelete: Cascade)
  createdBy      User             @relation(fields: [createdById], references: [id])
  school         School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  staff          Staff            @relation(fields: [staffId], references: [id], onDelete: Cascade)
  subject        Subject          @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  term           Term?            @relation(fields: [termId], references: [id])
  gradeEntries   GradeEntry[]
  grades         Grade[]

  @@map("assessments")
}

model Grade {
  id               String      @id @default(uuid())
  marksObtained    Float
  totalMarks       Float
  percentage       Float
  letterGrade      String?
  gpa              Float?
  points           Float?
  status           GradeStatus @default(PENDING)
  rubricScores     Json?
  questionScores   Json?
  feedback         String?
  privateNotes     String?
  attempt          Int         @default(1)
  submittedAt      DateTime?
  isLate           Boolean     @default(false)
  daysLate         Int         @default(0)
  aiGraded         Boolean     @default(false)
  aiConfidence     Float?
  flaggedForReview Boolean     @default(false)
  reviewReason     String?
  parentViewed     Boolean     @default(false)
  parentViewedAt   DateTime?
  attachments      Json?
  schoolId         String
  assessmentId     String
  studentId        String
  gradedById       String?
  gradedAt         DateTime?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  assessment       Assessment  @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  gradedBy         User?       @relation("GradedBy", fields: [gradedById], references: [id])
  school           School      @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  student          Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([assessmentId, studentId, attempt])
  @@map("grades")
}

model Attendance {
  id                  String              @id @default(uuid())
  date                DateTime            @default(now())
  status              AttendanceStatus
  period              AttendancePeriod    @default(FULL_DAY)
  checkInTime         DateTime?
  checkOutTime        DateTime?
  method              AttendanceMethod    @default(MANUAL)
  location            Json?
  notes               String?
  parentNotified      Boolean             @default(false)
  notificationSentAt  DateTime?
  isModified          Boolean             @default(false)
  modificationReason  String?
  schoolId            String
  studentId           String
  classId             String
  subjectId           String?
  markedById          String
  markedAt            DateTime            @default(now())
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  academicYearId      String
  adminNotes          String?
  deviceInfo          Json?
  ipAddress           String?
  modifiedAt          DateTime?
  modifiedById        String?
  temperature         Float?
  termId              String?
  totalMinutesPresent Int?
  academicYear        AcademicYear        @relation(fields: [academicYearId], references: [id])
  class               Class               @relation(fields: [classId], references: [id], onDelete: Cascade)
  markedBy            User                @relation("AttendanceMarkedBy", fields: [markedById], references: [id])
  modifiedBy          User?               @relation("AttendanceModifiedBy", fields: [modifiedById], references: [id])
  school              School              @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  student             Student             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject             Subject?            @relation(fields: [subjectId], references: [id])
  term                Term?               @relation(fields: [termId], references: [id])
  sessions            AttendanceSession[] @relation("AttendanceToAttendanceSession")

  @@unique([studentId, classId, date, period])
  @@map("attendance")
}

model AttendanceSession {
  id          String       @id @default(uuid())
  sessionName String
  startTime   DateTime
  endTime     DateTime
  isCompleted Boolean      @default(false)
  schoolId    String
  classId     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  class       Class        @relation(fields: [classId], references: [id])
  school      School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  attendances Attendance[] @relation("AttendanceToAttendanceSession")

  @@map("attendance_sessions")
}

model AttendancePolicy {
  id                        String    @id @default(uuid())
  name                      String
  description               String?
  graceMinutes              Int       @default(15)
  halfDayMinutes            Int       @default(240)
  fullDayMinutes            Int       @default(360)
  lowAttendanceThreshold    Float     @default(75.0)
  criticalThreshold         Float     @default(65.0)
  enableParentNotifications Boolean   @default(true)
  enableSMSAlerts           Boolean   @default(false)
  enableEmailAlerts         Boolean   @default(true)
  notifyOnLateArrival       Boolean   @default(true)
  notifyOnAbsence           Boolean   @default(true)
  enableGeofencing          Boolean   @default(false)
  geofenceRadius            Float?
  geofenceCenter            Json?
  isActive                  Boolean   @default(true)
  applicableFrom            DateTime  @default(now())
  applicableTo              DateTime?
  schoolId                  String
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  school                    School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@map("attendance_policies")
}

model AttendanceReport {
  id            String                 @id @default(uuid())
  title         String
  description   String?
  reportType    AttendanceReportType   @default(MONTHLY)
  fromDate      DateTime
  toDate        DateTime
  filters       Json?
  reportData    Json
  summary       Json?
  status        AttendanceReportStatus @default(PENDING)
  generatedAt   DateTime?
  fileUrl       String?
  schoolId      String
  generatedById String?
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  generatedBy   User?                  @relation(fields: [generatedById], references: [id])
  school        School                 @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@map("attendance_reports")
}

model Document {
  id                String           @id @default(uuid())
  fileName          String
  originalName      String
  filePath          String
  fileUrl           String
  fileSize          BigInt
  mimeType          String
  fileExtension     String?
  title             String
  description       String?
  category          DocumentCategory @default(OTHER)
  subcategory       String?
  type              DocumentType     @default(OTHER)
  tags              Json?
  isPublic          Boolean          @default(false)
  accessPermissions Json?
  metadata          Json?
  status            DocumentStatus   @default(ACTIVE)
  isVerified        Boolean          @default(false)
  verificationDate  DateTime?
  documentNumber    String?
  issuedBy          String?
  issueDate         DateTime?
  expiryDate        DateTime?
  downloadCount     Int              @default(0)
  lastAccessedAt    DateTime         @default(now())
  version           Int              @default(1)
  parentDocumentId  String?
  checksum          String?
  virusScan         Json?
  expiresAt         DateTime?
  schoolId          String
  uploadedById      String
  verifiedById      String?
  studentId         String?
  classId           String?
  notes             String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  class             Class?           @relation(fields: [classId], references: [id])
  parentDocument    Document?        @relation("DocumentVersions", fields: [parentDocumentId], references: [id])
  childDocuments    Document[]       @relation("DocumentVersions")
  school            School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  student           Student?         @relation(fields: [studentId], references: [id])
  uploadedBy        User             @relation("DocumentCreatedBy", fields: [uploadedById], references: [id])
  verifiedBy        User?            @relation("DocumentVerifiedBy", fields: [verifiedById], references: [id])

  @@map("documents")
}

model Notification {
  id                String                    @id @default(uuid())
  title             String
  message           String
  type              NotificationType
  priority          NotificationPriority      @default(NORMAL)
  category          NotificationCategory      @default(GENERAL)
  channels          NotificationChannel[]
  templateId        String?
  templateData      Json?
  targetType        NotificationTargetType
  targetUsers       String[]
  targetRoles       String[]
  targetClasses     String[]
  scheduledAt       DateTime?
  expiresAt         DateTime?
  status            NotificationStatus        @default(PENDING)
  sentAt            DateTime?
  deliveredAt       DateTime?
  readCount         Int                       @default(0)
  totalTargets      Int                       @default(0)
  metadata          Json?
  schoolId          String
  createdById       String
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  deliveryLogs      NotificationDeliveryLog[]
  createdBy         User                      @relation("NotificationCreatedBy", fields: [createdById], references: [id])
  school            School                    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  template          NotificationTemplate?     @relation(fields: [templateId], references: [id])
  userNotifications UserNotification[]

  @@map("notifications")
}

model NotificationTemplate {
  id            String               @id @default(uuid())
  name          String
  description   String?
  type          NotificationType
  category      NotificationCategory
  emailSubject  String?
  emailContent  String?
  emailHtml     String?
  smsContent    String?
  pushTitle     String?
  pushContent   String?
  inAppContent  String?
  variables     Json?
  isActive      Boolean              @default(true)
  isSystem      Boolean              @default(false)
  schoolId      String?
  createdById   String
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  createdBy     User                 @relation("NotificationTemplateCreatedBy", fields: [createdById], references: [id])
  school        School?              @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@unique([schoolId, name])
  @@map("notification_templates")
}

model UserNotification {
  id             String       @id @default(uuid())
  userId         String
  notificationId String
  isRead         Boolean      @default(false)
  readAt         DateTime?
  isDelivered    Boolean      @default(false)
  deliveredAt    DateTime?
  channelData    Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationId])
  @@map("user_notifications")
}

model NotificationDeliveryLog {
  id               String              @id @default(uuid())
  notificationId   String
  channel          NotificationChannel
  recipient        String
  status           DeliveryStatus
  providerId       String?
  providerResponse Json?
  errorCode        String?
  errorMessage     String?
  retryCount       Int                 @default(0)
  sentAt           DateTime?
  deliveredAt      DateTime?
  failedAt         DateTime?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  notification     Notification        @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@map("notification_delivery_logs")
}

model UserNotificationPreferences {
  id                String   @id @default(uuid())
  userId            String   @unique
  isEnabled         Boolean  @default(true)
  emailEnabled      Boolean  @default(true)
  smsEnabled        Boolean  @default(true)
  pushEnabled       Boolean  @default(true)
  inAppEnabled      Boolean  @default(true)
  preferences       Json?
  quietHoursEnabled Boolean  @default(false)
  quietHoursStart   String?
  quietHoursEnd     String?
  quietHoursDays    String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_notification_preferences")
}

model DeviceToken {
  id         String   @id @default(uuid())
  userId     String
  token      String   @unique
  platform   Platform
  deviceInfo Json?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("device_tokens")
}

model WebhookSubscription {
  id           String               @id @default(uuid())
  userId       String?
  schoolId     String
  url          String
  method       String               @default("POST")
  headers      String?
  events       String[]
  description  String?
  isActive     Boolean              @default(true)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  deliveryLogs WebhookDeliveryLog[]
  school       School               @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user         User?                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("webhook_subscriptions")
}

model WebhookDeliveryLog {
  id                    String                @id @default(uuid())
  webhookSubscriptionId String
  payload               String
  status                WebhookDeliveryStatus
  statusCode            Int?
  responseData          String?
  errorMessage          String?
  attempts              Int                   @default(1)
  responseTime          Int?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  webhookSubscription   WebhookSubscription   @relation(fields: [webhookSubscriptionId], references: [id], onDelete: Cascade)

  @@map("webhook_delivery_logs")
}

model Book {
  id              String       @id @default(uuid())
  title           String
  author          String
  isbn            String?      @unique
  publisher       String?
  publishedDate   DateTime?
  edition         String?
  language        String       @default("English")
  bookType        BookType     @default(PHYSICAL)
  fileUrl         String?
  fileFormat      String?
  fileSize        Int?
  downloadLimit   Int?
  category        BookCategory @default(GENERAL)
  subcategory     String?
  description     String?
  pages           Int?
  coverImageUrl   String?
  totalCopies     Int          @default(1)
  availableCopies Int          @default(1)
  issuedCopies    Int          @default(0)
  location        String?
  rackNumber      String?
  price           Float?
  procuredDate    DateTime?
  vendor          String?
  status          BookStatus   @default(AVAILABLE)
  tags            String[]
  subjects        String[]
  schoolId        String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  bookIssues      BookIssue[]
  school          School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@map("books")
}

model BookIssue {
  id             String         @id @default(uuid())
  bookId         String
  studentId      String
  issueDate      DateTime       @default(now())
  dueDate        DateTime
  returnDate     DateTime?
  status         IssueStatus    @default(ISSUED)
  fine           Float          @default(0.0)
  fineReason     String?
  finePaid       Boolean        @default(false)
  downloadCount  Int            @default(0)
  lastDownloadAt DateTime?
  accessExpiry   DateTime?
  issueNotes     String?
  returnNotes    String?
  condition      BookCondition?
  issuedById     String
  returnedById   String?
  schoolId       String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  book           Book           @relation(fields: [bookId], references: [id], onDelete: Cascade)
  issuedBy       User           @relation("IssuedBy", fields: [issuedById], references: [id])
  returnedBy     User?          @relation("ReturnedBy", fields: [returnedById], references: [id])
  school         School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  student        Student        @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("book_issues")
}

model Hostel {
  id            String             @id @default(uuid())
  name          String
  hostelType    HostelType
  gender        Gender?
  address       String?
  capacity      Int                @default(0)
  occupiedBeds  Int                @default(0)
  availableBeds Int                @default(0)
  wardenId      String?
  facilities    String[]
  description   String?
  status        HostelStatus       @default(ACTIVE)
  schoolId      String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  allocations   HostelAllocation[]
  fees          HostelFee[]
  rooms         HostelRoom[]
  school        School             @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  warden        Staff?             @relation(fields: [wardenId], references: [id])

  @@map("hostels")
}

model HostelRoom {
  id            String             @id @default(uuid())
  roomNumber    String
  floor         Int?
  roomType      RoomType           @default(STANDARD)
  capacity      Int                @default(1)
  occupiedBeds  Int                @default(0)
  availableBeds Int                @default(0)
  facilities    String[]
  status        RoomStatus         @default(AVAILABLE)
  hostelId      String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  allocations   HostelAllocation[]
  hostel        Hostel             @relation(fields: [hostelId], references: [id], onDelete: Cascade)

  @@unique([hostelId, roomNumber])
  @@map("hostel_rooms")
}

model HostelAllocation {
  id             String           @id @default(uuid())
  studentId      String
  hostelId       String
  roomId         String
  bedNumber      String?
  startDate      DateTime
  endDate        DateTime?
  status         AllocationStatus @default(ACTIVE)
  academicYearId String?
  remarks        String?
  schoolId       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  academicYear   AcademicYear?    @relation(fields: [academicYearId], references: [id])
  hostel         Hostel           @relation(fields: [hostelId], references: [id], onDelete: Cascade)
  room           HostelRoom       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  school         School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  student        Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("hostel_allocations")
}

model HostelFee {
  id              String        @id @default(uuid())
  hostelId        String
  roomType        RoomType
  amount          Float
  currency        String        @default("KES")
  frequency       FeeFrequency  @default(MONTHLY)
  description     String?
  academicYearId  String?
  securityDeposit Float?
  admissionFee    Float?
  status          HostelStatus  @default(ACTIVE)
  schoolId        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  academicYear    AcademicYear? @relation(fields: [academicYearId], references: [id])
  hostel          Hostel        @relation(fields: [hostelId], references: [id], onDelete: Cascade)
  school          School        @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@map("hostel_fees")
}

model MessageThread {
  id                 String                     @id @default(uuid())
  subject            String?
  type               MessageThreadType          @default(DIRECT)
  isGroup            Boolean                    @default(false)
  groupName          String?
  groupAvatar        String?
  status             MessageThreadStatus        @default(ACTIVE)
  isArchived         Boolean                    @default(false)
  isPinned           Boolean                    @default(false)
  classId            String?
  subjectId          String?
  entityType         String?
  entityId           String?
  lastMessageAt      DateTime?
  lastMessagePreview String?
  schoolId           String
  createdById        String
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @updatedAt
  participants       MessageThreadParticipant[]
  createdBy          User                       @relation("ThreadCreator", fields: [createdById], references: [id])
  school             School                     @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  messages           Message[]

  @@map("message_threads")
}

model MessageThreadParticipant {
  id          String            @id @default(uuid())
  threadId    String
  userId      String
  isAdmin     Boolean           @default(false)
  isMuted     Boolean           @default(false)
  isArchived  Boolean           @default(false)
  isPinned    Boolean           @default(false)
  joinedAt    DateTime          @default(now())
  lastReadAt  DateTime?
  unreadCount Int               @default(0)
  status      ParticipantStatus @default(ACTIVE)
  leftAt      DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  thread      MessageThread     @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([threadId, userId])
  @@map("message_thread_participants")
}

model Message {
  id              String             @id @default(uuid())
  threadId        String
  content         String
  messageType     MessageType        @default(TEXT)
  parentMessageId String?
  attachments     Json?
  isEdited        Boolean            @default(false)
  editedAt        DateTime?
  isDeleted       Boolean            @default(false)
  deletedAt       DateTime?
  priority        MessagePriority    @default(NORMAL)
  isImportant     Boolean            @default(false)
  isPinned        Boolean            @default(false)
  senderId        String
  schoolId        String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  recipients      MessageRecipient[]
  parentMessage   Message?           @relation("MessageReplies", fields: [parentMessageId], references: [id])
  replies         Message[]          @relation("MessageReplies")
  school          School             @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  sender          User               @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  thread          MessageThread      @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model MessageRecipient {
  id             String                @id @default(uuid())
  messageId      String
  recipientId    String
  isRead         Boolean               @default(false)
  readAt         DateTime?
  deliveryStatus MessageDeliveryStatus @default(PENDING)
  deliveredAt    DateTime?
  isStarred      Boolean               @default(false)
  isArchived     Boolean               @default(false)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  message        Message               @relation(fields: [messageId], references: [id], onDelete: Cascade)
  recipient      User                  @relation("MessageRecipient", fields: [recipientId], references: [id], onDelete: Cascade)

  @@unique([messageId, recipientId])
  @@map("message_recipients")
}

model TransportRoute {
  id                 String                       @id @default(uuid())
  routeName          String
  routeNumber        String?
  description        String?
  startPoint         String
  endPoint           String
  stops              Json
  distance           Float?
  estimatedTime      Int?
  fare               Float                        @default(0)
  currency           String                       @default("KES")
  status             TransportStatus              @default(ACTIVE)
  isActive           Boolean                      @default(true)
  schoolId           String
  createdAt          DateTime                     @default(now())
  updatedAt          DateTime                     @updatedAt
  vehicles           RouteVehicleAssignment[]
  studentAssignments StudentTransportAssignment[]
  school             School                       @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@map("transport_routes")
}

model Vehicle {
  id                 String                       @id @default(uuid())
  vehicleNumber      String                       @unique
  vehicleName        String?
  vehicleType        VehicleType
  make               String?
  model              String?
  year               Int?
  color              String?
  registrationNumber String?
  seatingCapacity    Int                          @default(0)
  currentOccupancy   Int                          @default(0)
  driverName         String?
  driverPhone        String?
  driverLicense      String?
  lastServiceDate    DateTime?
  nextServiceDate    DateTime?
  insuranceExpiry    DateTime?
  roadworthyExpiry   DateTime?
  gpsEnabled         Boolean                      @default(false)
  gpsDeviceId        String?
  status             VehicleStatus                @default(ACTIVE)
  condition          VehicleCondition             @default(GOOD)
  schoolId           String
  createdAt          DateTime                     @default(now())
  updatedAt          DateTime                     @updatedAt
  routeAssignments   RouteVehicleAssignment[]
  studentAssignments StudentTransportAssignment[]
  maintenanceRecords VehicleMaintenance[]
  school             School                       @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@map("vehicles")
}

model RouteVehicleAssignment {
  id            String          @id @default(uuid())
  routeId       String
  vehicleId     String
  dayOfWeek     String[]
  departureTime String?
  arrivalTime   String?
  direction     RouteDirection  @default(BOTH)
  startDate     DateTime
  endDate       DateTime?
  status        TransportStatus @default(ACTIVE)
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  route         TransportRoute  @relation(fields: [routeId], references: [id], onDelete: Cascade)
  vehicle       Vehicle         @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@unique([routeId, vehicleId, direction])
  @@map("route_vehicle_assignments")
}

model StudentTransportAssignment {
  id             String          @id @default(uuid())
  studentId      String
  routeId        String
  vehicleId      String?
  pickupPoint    String
  pickupTime     String?
  dropoffPoint   String
  dropoffTime    String?
  guardianName   String?
  guardianPhone  String?
  startDate      DateTime
  endDate        DateTime?
  academicYearId String?
  status         TransportStatus @default(ACTIVE)
  isActive       Boolean         @default(true)
  schoolId       String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  academicYear   AcademicYear?   @relation(fields: [academicYearId], references: [id])
  route          TransportRoute  @relation(fields: [routeId], references: [id], onDelete: Cascade)
  school         School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  student        Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  vehicle        Vehicle?        @relation(fields: [vehicleId], references: [id])

  @@map("student_transport_assignments")
}

model VehicleMaintenance {
  id              String            @id @default(uuid())
  vehicleId       String
  maintenanceType MaintenanceType
  description     String?
  cost            Float?
  currency        String            @default("KES")
  serviceProvider String?
  mechanicName    String?
  mechanicPhone   String?
  scheduledDate   DateTime?
  completedDate   DateTime?
  nextServiceDate DateTime?
  status          MaintenanceStatus @default(SCHEDULED)
  odometerReading Int?
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  vehicle         Vehicle           @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("vehicle_maintenance")
}

model InventoryCategory {
  id          String              @id @default(uuid())
  name        String
  description String?
  parentId    String?
  schoolId    String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  parent      InventoryCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    InventoryCategory[] @relation("CategoryHierarchy")
  school      School              @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  items       InventoryItem[]

  @@map("inventory_categories")
}

model InventoryItem {
  id              String                 @id @default(uuid())
  name            String
  description     String?
  itemCode        String                 @unique
  barcode         String?
  categoryId      String
  quantity        Int                    @default(0)
  minimumStock    Int                    @default(0)
  maximumStock    Int?
  reorderLevel    Int?
  unit            String
  location        String?
  shelf           String?
  bin             String?
  unitPrice       Float                  @default(0)
  totalValue      Float                  @default(0)
  currency        String                 @default("KES")
  supplierName    String?
  supplierContact String?
  itemType        InventoryItemType
  status          InventoryItemStatus    @default(ACTIVE)
  condition       ItemCondition          @default(GOOD)
  expiryDate      DateTime?
  warrantyExpiry  DateTime?
  notes           String?
  tags            String[]
  imageUrl        String?
  schoolId        String
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  allocations     InventoryAllocation[]
  category        InventoryCategory      @relation(fields: [categoryId], references: [id])
  school          School                 @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  transactions    InventoryTransaction[]

  @@map("inventory_items")
}

model InventoryTransaction {
  id              String          @id @default(uuid())
  transactionType TransactionType
  quantity        Int
  unitPrice       Float?
  totalAmount     Float?
  itemId          String
  previousQty     Int
  newQty          Int
  referenceType   String?
  referenceId     String?
  referenceNumber String?
  userId          String
  supplierName    String?
  recipientName   String?
  recipientType   String?
  recipientId     String?
  reason          String?
  notes           String?
  transactionDate DateTime        @default(now())
  schoolId        String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  item            InventoryItem   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  school          School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id])

  @@map("inventory_transactions")
}

model InventoryAllocation {
  id              String                    @id @default(uuid())
  itemId          String
  quantity        Int
  allocatedTo     String
  allocatedToType AllocationTargetType
  allocatedToId   String?
  allocationDate  DateTime                  @default(now())
  expectedReturn  DateTime?
  actualReturn    DateTime?
  status          InventoryAllocationStatus @default(ALLOCATED)
  issuedCondition ItemCondition             @default(GOOD)
  returnCondition ItemCondition?
  allocatedBy     String
  purpose         String?
  notes           String?
  returnNotes     String?
  schoolId        String
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  allocatedByUser User                      @relation(fields: [allocatedBy], references: [id])
  item            InventoryItem             @relation(fields: [itemId], references: [id], onDelete: Cascade)
  school          School                    @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@map("inventory_allocations")
}

model GradeScale {
  id          String       @id @default(uuid())
  schoolId    String
  name        String
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  gradeRanges GradeRange[]
  school      School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  results     Result[]

  @@map("grade_scales")
}

model GradeRange {
  id           String     @id @default(uuid())
  gradeScaleId String
  grade        String
  minScore     Float
  maxScore     Float
  gradePoint   Float
  remark       String
  color        String?
  createdAt    DateTime   @default(now())
  gradeScale   GradeScale @relation(fields: [gradeScaleId], references: [id], onDelete: Cascade)

  @@map("grade_ranges")
}

model Result {
  id               String          @id @default(uuid())
  studentId        String
  termId           String
  classId          String
  schoolId         String
  gradeScaleId     String
  totalScore       Float
  totalSubjects    Int
  averageScore     Float
  position         Int?
  daysPresent      Int             @default(0)
  daysAbsent       Int             @default(0)
  timesLate        Int             @default(0)
  conductGrade     String?
  teacherComment   String?
  principalComment String?
  promoted         Boolean         @default(false)
  isPublished      Boolean         @default(false)
  publishedAt      DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  class            Class           @relation(fields: [classId], references: [id], onDelete: Cascade)
  gradeScale       GradeScale      @relation(fields: [gradeScaleId], references: [id])
  school           School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  student          Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  term             Term            @relation(fields: [termId], references: [id], onDelete: Cascade)
  subjectResults   SubjectResult[]

  @@unique([studentId, termId])
  @@map("results")
}

model SubjectResult {
  id         String   @id @default(uuid())
  resultId   String
  subjectId  String
  firstCA    Float?
  secondCA   Float?
  thirdCA    Float?
  exam       Float?
  totalCA    Float?
  totalScore Float?
  grade      String?
  gradePoint Float?
  remark     String?
  position   Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  result     Result   @relation(fields: [resultId], references: [id], onDelete: Cascade)
  subject    Subject  @relation(fields: [subjectId], references: [id])

  @@unique([resultId, subjectId])
  @@map("subject_results")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  PRINCIPAL
  VICE_PRINCIPAL
  TEACHER
  STUDENT
  PARENT
  STAFF
  LIBRARIAN
  ACCOUNTANT
  RECEPTIONIST
}

enum SchoolType {
  PRIMARY
  SECONDARY
  COLLEGE
  UNIVERSITY
  VOCATIONAL
  OTHER
}

enum SchoolStatus {
  ACTIVE
  PENDING
  SUSPENDED
  INACTIVE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  GRADUATED
  TRANSFERRED
  DROPPED_OUT
  SUSPENDED
  EXPELLED
}

enum StaffType {
  TEACHER
  ADMINISTRATOR
  LIBRARIAN
  ACCOUNTANT
  RECEPTIONIST
  SECURITY
  MAINTENANCE
  COUNSELOR
  NURSE
  GENERAL
}

enum StaffStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
  TERMINATED
  RETIRED
}

enum GuardianStatus {
  ACTIVE
  INACTIVE
  PENDING_VERIFICATION
  SUSPENDED
}

enum GuardianRelationship {
  FATHER
  MOTHER
  GRANDFATHER
  GRANDMOTHER
  UNCLE
  AUNT
  SIBLING
  LEGAL_GUARDIAN
  OTHER
}

enum AssessmentType {
  QUIZ
  TEST
  EXAM
  ASSIGNMENT
  PROJECT
  HOMEWORK
  PRACTICAL
  ORAL
  CONTINUOUS_ASSESSMENT
  AFFECTIVE
  PSYCHOMOTOR
}

enum AssessmentStatus {
  DRAFT
  PUBLISHED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum GradingMethod {
  PERCENTAGE
  LETTER_GRADE
  GPA
  POINTS
  RUBRIC
}

enum GradeStatus {
  PENDING
  GRADED
  SUBMITTED
  LATE
  MISSING
  EXCUSED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
  PARTIAL
  SICK
  SUSPENDED
  EARLY_DEPARTURE
}

enum AttendancePeriod {
  MORNING
  AFTERNOON
  FULL_DAY
  PERIOD_1
  PERIOD_2
  PERIOD_3
  PERIOD_4
  PERIOD_5
  PERIOD_6
  PERIOD_7
  PERIOD_8
  LUNCH
  ASSEMBLY
  BREAK
  CUSTOM
}

enum AttendanceMethod {
  MANUAL
  QR_CODE
  BIOMETRIC
  GEOFENCING
  BULK
  RFID
  FACE_RECOGNITION
  MOBILE_APP
  WEB_PORTAL
  CSV_IMPORT
}

enum AttendanceReportType {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  ANNUAL
  CUSTOM_RANGE
  STUDENT_WISE
  CLASS_WISE
  TEACHER_WISE
}

enum AttendanceReportStatus {
  PENDING
  GENERATING
  COMPLETED
  FAILED
  EXPIRED
}

enum AcademicTerm {
  FIRST
  SECOND
  THIRD
}

enum DocumentCategory {
  STUDENT_DOCUMENTS
  TEACHER_DOCUMENTS
  STAFF_DOCUMENTS
  ACADEMIC_MATERIALS
  ASSESSMENTS
  ASSIGNMENTS
  REPORTS
  CERTIFICATES
  FORMS
  POLICIES
  ANNOUNCEMENTS
  MEDIA
  OTHER
}

enum DocumentType {
  BIRTH_CERTIFICATE
  MEDICAL_RECORD
  IMMUNIZATION_RECORD
  PREVIOUS_SCHOOL_RECORD
  TRANSFER_CERTIFICATE
  REPORT_CARD
  ID_CARD
  PASSPORT
  VISA
  RESIDENCE_PERMIT
  GUARDIAN_ID
  FEE_RECEIPT
  SCHOLARSHIP_DOCUMENT
  SPECIAL_NEEDS_ASSESSMENT
  PHOTO
  ASSIGNMENT
  LESSON_PLAN
  CURRICULUM
  POLICY
  FORM
  CERTIFICATE
  ANNOUNCEMENT
  MEDIA
  ASSESSMENT
  GRADE_SHEET
  ATTENDANCE_RECORD
  OTHER
}

enum DocumentStatus {
  ACTIVE
  EXPIRED
  REVOKED
  PENDING_VERIFICATION
  ARCHIVED
  DELETED
}

enum NotificationType {
  SYSTEM
  ACADEMIC
  ATTENDANCE
  EXAM_RESULT
  FEE_REMINDER
  ANNOUNCEMENT
  EVENT
  EMERGENCY
  WELCOME
  PASSWORD_RESET
  GRADE_UPDATE
  ASSIGNMENT
  TIMETABLE_CHANGE
  DISCIPLINARY
  HEALTH
  TRANSPORT
  LIBRARY
  CUSTOM
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
  CRITICAL
}

enum NotificationCategory {
  GENERAL
  ACADEMIC
  ADMINISTRATIVE
  FINANCIAL
  HEALTH
  SAFETY
  EVENTS
  SYSTEM
  PERSONAL
}

enum NotificationChannel {
  EMAIL
  SMS
  PUSH
  IN_APP
  WEBHOOK
}

enum NotificationTargetType {
  ALL_USERS
  SPECIFIC_USERS
  ROLE_BASED
  CLASS_BASED
  COMBINED
}

enum NotificationStatus {
  DRAFT
  PENDING
  SCHEDULED
  SENDING
  SENT
  PARTIALLY_SENT
  FAILED
  CANCELLED
  EXPIRED
}

enum DeliveryStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  BOUNCED
  REJECTED
  RETRYING
}

enum Platform {
  ANDROID
  IOS
  WEB
  WINDOWS
  MACOS
  LINUX
}

enum WebhookDeliveryStatus {
  SUCCESS
  FAILED
  PENDING
  RETRYING
}

enum CurriculumType {
  STANDARD
  CAMBRIDGE
  IB
  NATIONAL
  STEM
  ARTS
  VOCATIONAL
  CUSTOM
}

enum CurriculumStatus {
  DRAFT
  ACTIVE
  INACTIVE
  ARCHIVED
  UNDER_REVIEW
}

enum ObjectiveType {
  KNOWLEDGE
  COMPREHENSION
  APPLICATION
  ANALYSIS
  SYNTHESIS
  EVALUATION
  SKILL
  ATTITUDE
}

enum BloomLevel {
  REMEMBER
  UNDERSTAND
  APPLY
  ANALYZE
  EVALUATE
  CREATE
}

enum ImplementationStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  PAUSED
  CANCELLED
}

enum CustomizationLevel {
  MINIMAL
  MODERATE
  FULL
}

enum ProgressionStatus {
  AHEAD
  ON_TRACK
  BEHIND
  AT_RISK
}

enum GradeBookStatus {
  ACTIVE
  ARCHIVED
  LOCKED
  DRAFT
}

enum GradeReportType {
  TERM_REPORT
  SEMESTER_REPORT
  ANNUAL_REPORT
  PROGRESS_REPORT
  PARENT_CONFERENCE
  TRANSCRIPT
  CUSTOM
}

enum ReportStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  PUBLISHED
  SENT
  ARCHIVED
}

enum BatchProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  PARTIAL
}

enum ClassSubjectStatus {
  ACTIVE
  INACTIVE
  COMPLETED
  CANCELLED
  SUSPENDED
}

enum ClassTeacherStatus {
  ACTIVE
  INACTIVE
  COMPLETED
  TRANSFERRED
  CANCELLED
}

enum FileCategory {
  PROFILE_PICTURE
  DOCUMENT
  IMAGE
  AUDIO
  VIDEO
  REPORT
  ASSIGNMENT
  OTHER
}

enum FileStatus {
  ACTIVE
  ARCHIVED
  DELETED
  QUARANTINED
  PROCESSING
}

enum SubjectAssignmentStatus {
  ACTIVE
  INACTIVE
  COMPLETED
  TRANSFERRED
  CANCELLED
  SUSPENDED
}

enum BookType {
  PHYSICAL
  EBOOK
  BOTH
}

enum BookCategory {
  FICTION
  NON_FICTION
  SCIENCE
  MATHEMATICS
  HISTORY
  GEOGRAPHY
  LITERATURE
  BIOGRAPHY
  REFERENCE
  TEXTBOOK
  MAGAZINE
  JOURNAL
  GENERAL
}

enum BookStatus {
  AVAILABLE
  ISSUED
  LOST
  DAMAGED
  UNDER_REPAIR
  WITHDRAWN
}

enum IssueStatus {
  ISSUED
  RETURNED
  OVERDUE
  LOST
  DAMAGED
}

enum BookCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
  DAMAGED
}

enum HostelType {
  BOYS
  GIRLS
  MIXED
  STAFF
}

enum HostelStatus {
  ACTIVE
  INACTIVE
  UNDER_MAINTENANCE
  CLOSED
}

enum RoomType {
  SINGLE
  DOUBLE
  TRIPLE
  QUAD
  DORMITORY
  STANDARD
  DELUXE
  SUITE
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  UNDER_MAINTENANCE
  RESERVED
}

enum AllocationStatus {
  ACTIVE
  INACTIVE
  COMPLETED
  CANCELLED
  TRANSFERRED
}

enum FeeFrequency {
  MONTHLY
  QUARTERLY
  SEMESTERLY
  YEARLY
  ONE_TIME
}

enum MessageThreadType {
  DIRECT
  GROUP
  CLASS
  ANNOUNCEMENT
  BROADCAST
}

enum MessageThreadStatus {
  ACTIVE
  ARCHIVED
  CLOSED
  DELETED
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  FILE
  LINK
}

enum MessagePriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum MessageDeliveryStatus {
  PENDING
  DELIVERED
  FAILED
  READ
}

enum ParticipantStatus {
  ACTIVE
  LEFT
  REMOVED
  BLOCKED
}

enum VehicleType {
  BUS
  VAN
  CAR
  MINIBUS
  COACH
}

enum VehicleStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  OUT_OF_SERVICE
  RETIRED
}

enum VehicleCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
  NEEDS_REPAIR
}

enum TransportStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  CANCELLED
}

enum RouteDirection {
  TO_SCHOOL
  FROM_SCHOOL
  BOTH
}

enum MaintenanceType {
  ROUTINE_SERVICE
  REPAIR
  INSPECTION
  OIL_CHANGE
  TIRE_REPLACEMENT
  BRAKE_SERVICE
  ENGINE_REPAIR
  BODY_WORK
  ELECTRICAL
  EMERGENCY
  OTHER
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

enum InventoryItemType {
  ASSET
  CONSUMABLE
  EQUIPMENT
  FURNITURE
  ELECTRONICS
  SPORTS
  BOOKS
  UNIFORMS
  LABORATORY
  OFFICE
  MEDICAL
  OTHER
}

enum InventoryItemStatus {
  ACTIVE
  LOW_STOCK
  OUT_OF_STOCK
  DISCONTINUED
  ON_ORDER
  INACTIVE
  EXPIRED
  RESERVED
}

enum ItemCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
  DAMAGED
  NEEDS_REPAIR
  UNDER_REPAIR
}

enum TransactionType {
  PURCHASE
  ISSUE
  RETURN
  ADJUSTMENT
  WRITE_OFF
  TRANSFER
  DONATION
  DISPOSAL
}

enum AllocationTargetType {
  STUDENT
  TEACHER
  STAFF
  DEPARTMENT
  CLASS
  HOSTEL
  LIBRARY
  LABORATORY
  OTHER
}

enum InventoryAllocationStatus {
  ALLOCATED
  RETURNED
  OVERDUE
  LOST
  DAMAGED
  CANCELLED
}
