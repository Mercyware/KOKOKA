import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Plus, Building, Edit, Trash2, Loader2, Search, MoreVertical } from 'lucide-react';
import Layout from '../../../components/layout/Layout';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import {
  AlertDialog,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { getDepartments, createDepartment, updateDepartment, deleteDepartment, Department } from '../../../services/departmentService';

const DepartmentsList: React.FC = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [departments, setDepartments] = useState<Department[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [departmentToDelete, setDepartmentToDelete] = useState<Department | null>(null);
  
  // Modal states
  const [modalOpen, setModalOpen] = useState(false);
  const [modalMode, setModalMode] = useState<'create' | 'edit'>('create');
  const [selectedDepartment, setSelectedDepartment] = useState<Department | null>(null);
  const [modalLoading, setModalLoading] = useState(false);
  const [isCodeAutoGenerated, setIsCodeAutoGenerated] = useState(true);
  const [userHasEditedCode, setUserHasEditedCode] = useState(false);
  
  // Form data
  const [formData, setFormData] = useState({
    name: '',
    code: '',
    description: '',
    headOfDept: '',
  });

  // Utility function to generate department code from name
  const generateDepartmentCode = (name: string): string => {
    if (!name.trim()) return '';
    
    // Remove common words and generate acronym
    const commonWords = ['of', 'and', 'the', 'for', 'in', 'on', 'at', 'to', 'with', 'by'];
    const words = name.trim()
      .split(/\s+/)
      .filter(word => word.length > 0 && !commonWords.includes(word.toLowerCase()))
      .slice(0, 4); // Limit to first 4 significant words
    
    if (words.length === 1) {
      // Single word: take first 3-4 characters
      return words[0].substring(0, Math.min(4, words[0].length)).toUpperCase();
    } else {
      // Multiple words: create acronym
      return words.map(word => word.charAt(0)).join('').toUpperCase();
    }
  };

  useEffect(() => {
    fetchDepartments();
  }, []);

  const fetchDepartments = async () => {
    setLoading(true);
    try {
      console.log('Fetching departments...');
      const response = await getDepartments();
      console.log('Departments response:', response);

      if (response.success && response.data) {
        // Backend returns data array directly in response.data
        const depts = Array.isArray(response.data) ? response.data : [];
        console.log('Setting departments:', depts);
        setDepartments(depts);
      } else {
        console.log('Departments request failed:', response);
        setDepartments([]);
        toast({
          title: "Error",
          description: response.message || 'Failed to fetch departments',
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error('Error fetching departments:', error);
      setDepartments([]);
      toast({
        title: "Error",
        description: 'An error occurred while fetching departments',
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteDepartment = async () => {
    if (!departmentToDelete) return;

    try {
      const response = await deleteDepartment(departmentToDelete.id);
      if (response.success) {
        toast({
          title: "Success",
          description: 'Department deleted successfully',
        });
        fetchDepartments();
      } else {
        toast({
          title: "Error",
          description: response.message || 'Failed to delete department',
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error('Error deleting department:', error);
      toast({
        title: "Error",
        description: 'An error occurred while deleting the department',
        variant: "destructive",
      });
    } finally {
      setDepartmentToDelete(null);
    }
  };

  // Modal handlers
  const handleOpenModal = (mode: 'create' | 'edit', department?: Department) => {
    setModalMode(mode);
    setSelectedDepartment(department || null);
    
    if (mode === 'create') {
      setFormData({
        name: '',
        code: '',
        description: '',
        headOfDept: '',
      });
      setIsCodeAutoGenerated(true);
      setUserHasEditedCode(false);
    } else if (department) {
      setFormData({
        name: department.name,
        code: department.code,
        description: department.description || '',
        headOfDept: department.headOfDept || '',
      });
      setIsCodeAutoGenerated(false); // Don't auto-generate when editing
      setUserHasEditedCode(true); // Prevent auto-generation in edit mode
    }
    
    setModalOpen(true);
  };

  const handleCloseModal = () => {
    setModalOpen(false);
    setSelectedDepartment(null);
    setFormData({
      name: '',
      code: '',
      description: '',
      headOfDept: '',
    });
    setIsCodeAutoGenerated(true);
    setUserHasEditedCode(false);
  };

  // Handler for name input changes with auto code generation
  const handleNameChange = (value: string) => {
    setFormData(prev => ({ ...prev, name: value }));
    
    // Auto-generate code only in create mode and if user hasn't manually edited the code
    if (modalMode === 'create' && !userHasEditedCode) {
      const generatedCode = generateDepartmentCode(value);
      setFormData(prev => ({ ...prev, code: generatedCode }));
    }
  };

  // Handler for manual code changes
  const handleCodeChange = (value: string) => {
    setFormData(prev => ({ ...prev, code: value.toUpperCase() }));
    
    if (modalMode === 'create') {
      if (value.trim() === '') {
        // If user clears the code, re-enable auto-generation
        setUserHasEditedCode(false);
        setIsCodeAutoGenerated(true);
        const generatedCode = generateDepartmentCode(formData.name);
        setFormData(prev => ({ ...prev, code: generatedCode }));
      } else {
        // User is typing in the code field - mark as manually edited
        setUserHasEditedCode(true);
        setIsCodeAutoGenerated(false);
      }
    }
  };

  const handleFormSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.name.trim() || !formData.code.trim()) {
      toast({
        title: "Error",
        description: 'Department name and code are required',
        variant: "destructive",
      });
      return;
    }

    setModalLoading(true);
    try {
      const departmentData = {
        name: formData.name.trim(),
        code: formData.code.trim(),
        description: formData.description.trim() || undefined,
        headOfDept: formData.headOfDept.trim() || undefined,
      };

      let response;
      if (modalMode === 'create') {
        response = await createDepartment(departmentData);
      } else if (selectedDepartment?.id) {
        response = await updateDepartment(selectedDepartment.id, departmentData);
      }

      if (response?.success) {
        toast({
          title: "Success",
          description: `Department ${modalMode === 'create' ? 'created' : 'updated'} successfully`,
        });
        handleCloseModal();
        fetchDepartments();
      } else {
        throw new Error(response?.error || `Failed to ${modalMode} department`);
      }
    } catch (error: any) {
      console.error(`Error ${modalMode} department:`, error);
      toast({
        title: "Error",
        description: error.message || `Failed to ${modalMode} department`,
        variant: "destructive",
      });
    } finally {
      setModalLoading(false);
    }
  };

  const filteredDepartments = (departments || []).filter(department =>
    department.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    department.code?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    department.headOfDept?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <Layout>
      <div className="container mx-auto p-6 space-y-6">
        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 dark:text-white flex items-center gap-2">
              <Building className="h-8 w-8 text-blue-600" />
              Department Management
            </h1>
            <p className="text-gray-600 dark:text-gray-400 mt-1">
              Manage school departments and their organizational structure
            </p>
          </div>
          <Button
            intent="primary"
            onClick={() => handleOpenModal('create')}
          >
            <Plus className="h-4 w-4 mr-2" />
            Add New Department
          </Button>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>All Departments</CardTitle>
            <div className="flex items-center space-x-2">
              <div className="relative flex-1 max-w-sm">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <Input
                  placeholder="Search departments..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>
          </CardHeader>
          <CardContent>
            {loading ? (
              <div className="flex justify-center items-center py-12">
                <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
                <span className="ml-2 text-lg">Loading departments...</span>
              </div>
            ) : filteredDepartments.length === 0 ? (
              <div className="text-center py-12">
                <Building className="h-12 w-12 mx-auto mb-4 text-gray-400" />
                <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                  {searchTerm ? 'No departments found' : 'No departments yet'}
                </h3>
                <p className="text-gray-600 dark:text-gray-400 mb-4">
                  {searchTerm 
                    ? 'Try adjusting your search terms' 
                    : 'Get started by creating your first department'
                  }
                </p>
                {!searchTerm && (
                  <Button
                    intent="primary"
                    onClick={() => handleOpenModal('create')}
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Add New Department
                  </Button>
                )}
              </div>
            ) : (
              <div className="overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Department Name</TableHead>
                      <TableHead>Code</TableHead>
                      <TableHead>Head of Department</TableHead>
                      <TableHead>Description</TableHead>
                      <TableHead className="text-right">Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {filteredDepartments.map((department) => (
                      <TableRow key={department.id}>
                        <TableCell className="font-medium">
                          <Badge variant="outline">{department.name}</Badge>
                        </TableCell>
                        <TableCell>
                          <Badge variant="secondary">{department.code}</Badge>
                        </TableCell>
                        <TableCell>{department.headOfDept || 'Not assigned'}</TableCell>
                        <TableCell>{department.description || 'No description'}</TableCell>
                        <TableCell className="text-right">
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                                <MoreVertical className="h-4 w-4" />
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end" className="w-48">
                              <DropdownMenuItem onClick={() => handleOpenModal('edit', department)}>
                                <Edit className="h-4 w-4 mr-2" />
                                Edit
                              </DropdownMenuItem>
                              <DropdownMenuSeparator />
                              <DropdownMenuItem
                                onClick={() => setDepartmentToDelete(department)}
                                className="text-red-600 focus:text-red-600 focus:bg-red-50 dark:focus:bg-red-950"
                              >
                                <Trash2 className="h-4 w-4 mr-2" />
                                Delete
                              </DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Create/Edit Modal */}
        <Dialog open={modalOpen} onOpenChange={setModalOpen}>
          <DialogContent className="sm:max-w-md">
            <DialogHeader>
              <DialogTitle>
                {modalMode === 'create' ? 'Create New Department' : 'Edit Department'}
              </DialogTitle>
              <DialogDescription>
                {modalMode === 'create' 
                  ? 'Add a new department to organize your school structure.'
                  : 'Update the department information.'
                }
              </DialogDescription>
            </DialogHeader>
            
            <form onSubmit={handleFormSubmit} className="space-y-4">
              <div className="grid grid-cols-1 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="name">Department Name *</Label>
                  <Input
                    id="name"
                    value={formData.name}
                    onChange={(e) => handleNameChange(e.target.value)}
                    placeholder="e.g., Mathematics, Science"
                    required
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="code" className="flex items-center gap-2">
                    Department Code *
                    {modalMode === 'create' && !userHasEditedCode && formData.name && (
                      <span className="text-xs text-blue-600 bg-blue-50 px-2 py-1 rounded">
                        Auto-generated
                      </span>
                    )}
                  </Label>
                  <Input
                    id="code"
                    value={formData.code}
                    onChange={(e) => handleCodeChange(e.target.value)}
                    placeholder={modalMode === 'create' ? "Will be auto-generated" : "e.g., MATH, SCI"}
                    required
                    className={modalMode === 'create' && !userHasEditedCode ? 'bg-gray-50 text-gray-700' : ''}
                  />
                  {modalMode === 'create' && (
                    <p className="text-xs text-gray-500">
                      {!userHasEditedCode 
                        ? "Code is auto-generated from name. You can edit it manually." 
                        : "Manual code entry mode. Clear to re-enable auto-generation."
                      }
                    </p>
                  )}
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="headOfDept">Head of Department</Label>
                  <Input
                    id="headOfDept"
                    value={formData.headOfDept}
                    onChange={(e) => setFormData(prev => ({ ...prev, headOfDept: e.target.value }))}
                    placeholder="Name of department head"
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    value={formData.description}
                    onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                    placeholder="Brief description of the department"
                    rows={3}
                  />
                </div>
              </div>
              
              <DialogFooter className="gap-2">
                <Button
                  type="button"
                  intent="cancel"
                  onClick={handleCloseModal}
                  disabled={modalLoading}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  intent="primary"
                  disabled={modalLoading}
                >
                  {modalLoading ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      {modalMode === 'create' ? 'Creating...' : 'Updating...'}
                    </>
                  ) : (
                    modalMode === 'create' ? 'Create Department' : 'Update Department'
                  )}
                </Button>
              </DialogFooter>
            </form>
          </DialogContent>
        </Dialog>

        {/* Delete Confirmation Dialog */}
        <AlertDialog open={!!departmentToDelete} onOpenChange={(open) => !open && setDepartmentToDelete(null)}>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>Delete Department</AlertDialogTitle>
              <AlertDialogDescription>
                Are you sure you want to delete "{departmentToDelete?.name}"? This action cannot be undone and will remove all associated data.
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <Button
                intent="cancel"
                onClick={() => setDepartmentToDelete(null)}
              >
                Cancel
              </Button>
              <Button
                intent="danger"
                onClick={handleDeleteDepartment}
              >
                Delete
              </Button>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      </div>
    </Layout>
  );
};

export default DepartmentsList;